@using RusBlazor.Components.Helpers
@using RusBlazor.Enums
@typeparam T

@inject IJSRuntime JSRuntime

@if (IsOpen)
{
    <div class="@("rus-menu")" style="@($"{AnchorStyle()}")" id="@(parentContainerId)">

        @if (MenuTopContent != null)
        {
            <div class="rus-menu-top">
                @MenuTopContent
            </div>
        }

        @if (MenuContent != null)
        {
            <div class="rus-menu-dropdown" id="@id" style="@($"height:{dropdownHeight}px;")">
                @MenuContent
            </div>
        }

        @if (MenuBottomContent != null)
        {
            <div class="rus-menu-bottom">
                @MenuBottomContent
            </div>
        }

    </div>
    <RusBackgroundOverlay @ref="backgroundOverlay" OnClick="CloseAsync" />
}


@code {
    [Parameter]
    public bool IsOpen { get; set; } = false;

    [Parameter]
    public EventCallback<(bool, int)> IsOpenChanged { get; set; }

    [Parameter]
    public Anchor Anchor { get; set; } = Anchor.AUTO;

    [Parameter]
    public RenderFragment? MenuContent { get; set; }

    [Parameter]
    public RenderFragment? MenuTopContent { get; set; }

    [Parameter]
    public RenderFragment? MenuBottomContent { get; set; }

    string id;
    string parentContainerId;
    int animationDurationMs = 200;
    int dropdownHeight = 240;
    RusBackgroundOverlay? backgroundOverlay;

    public RusMenu()
    {
        id = Guid.NewGuid().ToString();
        parentContainerId = Guid.NewGuid().ToString();
    }

    string AnchorStyle()
    {
        string percentage = "110";
        return Anchor switch
        {
            Anchor.BOTTOM => $"top: {percentage}%; left: 0;",
            Anchor.TOP => $"bottom: {percentage}%; left: 0;",
            Anchor.LEFT => $"right: {percentage}%; top: 0;",
            Anchor.RIGHT => $"left: {percentage}%; top: 0;",
            Anchor.BOTTOM_LEFT => $"top: {percentage}%; right: 0;",
            Anchor.BOTTOM_RIGHT => $"top: {percentage}%; left: 0;",
            Anchor.TOP_LEFT => $"bottom: {percentage}%; right: 0;",
            Anchor.TOP_RIGHT => $"bottom: {percentage}%; left: 0;",
            _ => $"top: {percentage}%; left: 50%; transform: translateX(-50%);",
        };
    }

    public async Task OpenAsync()
    {
        var alreadyOpen = IsOpen;

        IsOpen = true;

        await InvokeAsync(async () =>
        {
            await IsOpenChanged.InvokeAsync((true, animationDurationMs));
        });

        if (!alreadyOpen)
        {
            var functionSpecs = new object[]
            {
                new { name = "toggleDropdownHeight", args = new object[] { id, true, dropdownHeight, animationDurationMs } },
                new { name = "toggleDropdownOpacity", args = new object[] { parentContainerId, true, animationDurationMs } }
            };

            await JSRuntime.InvokeVoidAsync("executeMultipleFunctions", new object[] { functionSpecs });
        }
    }

    public async Task CloseAsync()
    {
        if (IsOpen)
        {
            backgroundOverlay?.Close();
            var functionSpecs = new object[]
            {
                new { name = "toggleDropdownHeight", args = new object[] { id, false, dropdownHeight, animationDurationMs } },
                new { name = "toggleDropdownOpacity", args = new object[] { parentContainerId, false, animationDurationMs } }
            };

            await JSRuntime.InvokeVoidAsync("executeMultipleFunctions", new object[] { functionSpecs });

            await InvokeAsync(async () =>
            {
                await IsOpenChanged.InvokeAsync((false, animationDurationMs));
            });
            await Task.Delay(animationDurationMs);
            IsOpen = false;
        }
        else
        {
            // Trigger for outside components
            await InvokeAsync(async () =>
            {
                await IsOpenChanged.InvokeAsync((false, 0));
            });
        }
    }

    public string GetId()
    {
        return id;
    }
}