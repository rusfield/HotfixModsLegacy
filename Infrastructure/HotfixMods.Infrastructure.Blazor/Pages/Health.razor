@using HotfixMods.Infrastructure.Blazor.Components.Dialogs;
@using HotfixMods.Infrastructure.Config;
@using System.Diagnostics

@inject AppConfig Config
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HotfixService Service

<MudGrid Class="mb-1 px-3" Style="height:36.5px">
    <MudItem xs="4" />
    <MudItem xs="4">
        <MudText Typo="Typo.h4" Align="Align.Center" Style="width:100%;font-size:2.5rem;position:relative;top:-13px;">
            Health
        </MudText>
    </MudItem>
    <MudItem xs="4">
        <MudStack Row="true" Justify="Justify.FlexEnd">
            <MudButton Disabled="healthProgress" Variant="Variant.Filled" Color="Color.Success" OnClick="RunHealthCheckAsync">
                @if (healthProgress)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
                else
                {
                    @("Diagnose")
                }
            </MudButton>
        </MudStack>
    </MudItem>
</MudGrid>


<MudPaper Height="684px" Class="pt-4 mx-3 px-6">
    <MudGrid>
        <MudItem xs="6">
            <MudText Typo="Typo.h5" Style="color:var(--mud-palette-action-disabled); width:100%" Align="Align.Center">
                Problems
            </MudText>
            <MudDivider Class="mr-3" />
        </MudItem>
        <MudItem xs="6">
            <MudText Typo="Typo.h5" Style="color:var(--mud-palette-action-disabled); width:100%" Align="Align.Center">
                Description
            </MudText>
            <MudDivider Class="ml-3" />
        </MudItem>
        @foreach (var healthModel in healthModels)
        {
            <MudItem xs="6">
                <MudText>
                    @GetProblemText(healthModel)
                </MudText>
            </MudItem>
            <MudItem xs="5">
                <MudText>
                    @healthModel.Description
                </MudText>
            </MudItem>
            <MudItem xs="1">
                @{
                    var dialogAction = GetInfoDialog(healthModel);
                    if (dialogAction != null)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Info" OnClick="dialogAction" />
                    }
                }
            </MudItem>
        }
    </MudGrid>
</MudPaper>


@code {
    bool healthProgress = true;
    List<HealthModel> healthModels = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RunHealthCheckAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task RunHealthCheckAsync()
    {
        healthProgress = true;
        healthModels = new();
        var serverHealth = await Service.CheckServerAsync();
        if (serverHealth.Any())
        {
            healthModels.AddRange(serverHealth);
            await Task.Delay(500);
        }
        else
        {
            var modelHealth = await Service.CheckModelHealthAsync();
            healthModels.AddRange(modelHealth);
        }

        healthProgress = false;
        this.StateHasChanged();
    }

    string GetProblemText(HealthModel healthModel)
    {
        return healthModel.Status.ToDisplayString();
    }

    Action? GetInfoDialog(HealthModel healthModel)
    {

        var parameters = new DialogParameters();
        parameters.Add(nameof(ImplementHotfix_Dialog.Db2s), new List<string>() { "ModelFileData" });
        return (() => DialogService.Show<ImplementHotfix_Dialog>(null, parameters));

    }
}
