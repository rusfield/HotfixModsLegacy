@using RusBlazor.Enums

<div class="rus-tabs-container">
    <div class="rus-tabs">
        @if (MenuContent != null)
        {
            <div class="@($"rus-tabs-menu")">
                <RusButton DefaultPadding="false" Color="Color.TRANSPARENT" OnClick="OnMenuClick">
                    <RusIcon IconName="menu" Style="font-size: 2rem" />
                </RusButton>
            </div>
        }
        <div class="rus-tabs-title-container">
            <div class="rus-tabs-titles">
                @foreach (var tab in TabItems)
                {
                    bool active = tab == ActiveTab;
                    <div class="@($"rus-tabs-title {(active ? "active" : "")} {(tab.IsClosed ? "closed" : "")}")" @onclick="@(async () => await OpenTabAsync(tab))">
                        @if (!string.IsNullOrWhiteSpace(tab.IconName))
                        {
                            <div class="icon">
                                <RusIcon IconName="@tab.IconName" />
                            </div>
                        }
                        <span class="label">
                            @DisplayName(tab.Name)
                        </span>
                        @if (tab.IsClosable)
                        {
                            <div class="button">
                                <RusButton DefaultPadding="false" Style="@($"border-radius: 50%; height: 24px;")" OnClick="(async () => await CloseTabAsync(tab))">
                                    <RusIcon IconName="close" />
                                </RusButton>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="dummy-scrollbar" />
        </div>
    </div>
    <div style="position: relative;">
        @MenuContent
    </div>
    <CascadingValue Value="this" Name="TabsContainer">
        @TabContent
    </CascadingValue>
</div>

@code {
    [Parameter]
    public RenderFragment? MenuContent { get; set; }

    [Parameter]
    public RenderFragment TabContent { get; set; }

    [Parameter]
    public EventCallback OnMenuClick { get; set; }

    public List<RusTabItem> TabItems { get; } = new();

    public RusTabItem? ActiveTab { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && TabItems.Any())
        {
            // Re-render new TabItems that are added on load.
            if (TabItems.Any() && ActiveTab == null)
            {
                ActiveTab = TabItems.First();
            }
            this.StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    string DisplayName(string name)
    {
        name = name.ToUpper();
        /*
        if (name.Length > 12)
            return $"{name.Substring(0, 10)}...";
        */
        name = name + name + name + name;
        return name;
    }

    async Task CloseTabAsync(RusTabItem tab)
    {
        tab.IsClosed = true;

        var currentIndex = TabItems.IndexOf(tab);

        // Check if there is a tab after the current one, if not, set the previous tab as active
        if (currentIndex < TabItems.Count - 1)
            ActiveTab = TabItems[currentIndex + 1];
        else if (currentIndex > 0) // check to ensure the current tab is not also the first tab
            ActiveTab = TabItems[currentIndex - 1];
        else
            ActiveTab = null; // no other tabs are open

        await Task.Delay(200);
        TabItems.Remove(tab);
        this.StateHasChanged();
    }

    async Task OpenTabAsync(RusTabItem tab)
    {
        if (!tab.IsClosed)
            ActiveTab = tab;
    }

    public async Task OpenTabDialogAsync()
    {
        await ActiveTab.OpenDialogAsync();
    }
}