@typeparam TValue
@inherits InputBase<TValue>

<div class="rus-input-container @Class" style="@Style">
    <input id="@id" @bind="Value" @onfocus="@HandleFocusAsync" @onblur="@HandleBlurAsync" @oninput="@OnInput" class="rus-input @ActiveStyle()" disabled="@Disabled" />
    <div class="rus-input-subtext">@HelperText</div>
</div>

@code {
    [Parameter]
    public EventCallback OnFocus { get; set; }

    [Parameter]
    public EventCallback OnBlur { get; set; }

    [Parameter]
    public EventCallback<string> InputChanged { get; set; }

    [Parameter]
    public string HelperText { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter] // Used for handling active from the outside, for example menus which frequently loses focus of input
    public bool? Active { get; set; }

    string id;
    bool active = false;

    protected override void OnInitialized()
    {
        id = Guid.NewGuid().ToString();
        base.OnInitialized();
    }

    void OnInput(ChangeEventArgs args)
    {
        InputChanged.InvokeAsync(args.Value.ToString());
    }

    public string GetId()
    {
        return id;
    } 

    string ActiveStyle()
    {
        if(Active != null)
        {
            return (bool)Active ? "active" : "";
        }
        else
        {
            return active ? "active" : "";
        }
    }

    async Task HandleFocusAsync()
    {
        active = true;
        this.StateHasChanged();
        if (OnFocus.HasDelegate)
        {
            await OnFocus.InvokeAsync();
        }
    }

    async Task HandleBlurAsync()
    {
        active = false;
        this.StateHasChanged();
        if (OnBlur.HasDelegate)
        {
            await OnBlur.InvokeAsync();
        }
    }

    protected override bool TryParseValueFromString(string value, out TValue result, out string validationErrorMessage)
    {
        throw new NotImplementedException();
    }
}