@typeparam T

@using HotfixMods.Infrastructure.Blazor.Business
@using HotfixMods.Infrastructure.Blazor.Components.Private

<div class="custom-wrapper" style="width:100%;">
    <MudBadge Origin="Origin.CenterRight" Overlap="true" Icon="@Icons.Material.Filled.ArrowForward" Color="@Color.Primary" Visible="OnValueLookupClick.HasDelegate" OnClick="@(OnValueLookupClick)" Style="width:100%">
        <MudBadge Origin="Origin.CenterLeft" Overlap="true" Icon="@Icons.Material.Filled.ArrowForward" Color="@Color.Info" OnClick="@(() => SetValueAsync(ValueCompare!))" Visible="@(GetCompareBadgeVisibility())" Style="width:100%" Class="pt-4">

            @if (MultiSelection && GetOptionsAsync_Func != null)
            {
                <MultiSelect T="T" Label="@Label" Value="Value" ValueChanged="SetValueAsync" GetOptionsAsync_Func="GetOptionsAsync_Func" Variant="Variant" OnAdornmentClick="GetOnAdornmentClick()" AdornmentIcon="@GetAdornmentIcon()" Adornment="GetAdornment()" Error="error" Disabled="Disabled" />
            }
            else if (!AllowUndefinedValues && GetOptionsAsync_Func != null)
            {
                <SingleSelect T="T" Label="@Label" Value="Value" ValueChanged="SetValueAsync" GetOptionsAsync_Func="GetOptionsAsync_Func" Variant="Variant" OnAdornmentClick="GetOnAdornmentClick()" AdornmentIcon="@GetAdornmentIcon()" Adornment="GetAdornment()" Error="error" Disabled="Disabled" />
            }
            else if (null == GetOptionsAsync_Func)
            {
                if (typeof(T) == typeof(string))
                {
                    <MudTextField T="T" Lines="@Lines" Value="@Value" ValueChanged="SetValueAsync" Label="@Label" Variant="@Variant" HelperText="(string)" HelperTextOnFocus="true" OnAdornmentClick="GetOnAdornmentClick()" AdornmentIcon="@GetAdornmentIcon()" Adornment="GetAdornment()" Error="error" OnKeyDown="(() => SetError(false))" ErrorText="Enter a valid value." Disabled="Disabled" Class="adornment-clickable" />
                }
                else
                {
                    <MudNumericField T="T" Value="@Value" ValueChanged="SetValueAsync" Label="@Label" Variant="@Variant" HideSpinButtons="true" HelperText="@(ComponentHelper.GetHelperText<T>())" HelperTextOnFocus="true" Adornment="GetAdornment()" AdornmentIcon="@GetAdornmentIcon()" OnAdornmentClick="GetOnAdornmentClick()" Error="error" OnKeyDown="(() => SetError(false))" ErrorText="Enter a valid value." Disabled="Disabled" Class="adornment-clickable" />
                }
            }
            else
            {
                <Autocomplete T="T" Value="@Value" ValueChanged="SetValueAsync" Label="@Label" Variant="Variant" AdornmentIcon="@GetAdornmentIcon()" OnAdornmentClick="GetOnAdornmentClick()" Adornment="GetAdornment()" Error="error" GetOptionsAsync_Func="GetOptionsAsync_Func" />
            }
        </MudBadge>
    </MudBadge>
</div>

@code
{
    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public object? ValueCompare { get; set; }

    [Parameter]
    public Func<Task<Dictionary<T, string>>>? GetOptionsAsync_Func { get; set; }

    [Parameter]
    public EventCallback<T?> ValueChanged { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    [Parameter]
    public EventCallback OnIdAdornmentClick { get; set; }

    [Parameter]
    public EventCallback OnInfoAdornmentClick { get; set; }

    [Parameter]
    public EventCallback OnValueLookupClick { get; set; }

    [Parameter]
    public EventCallback OnSearchAdornmentClick { get; set; }

    [Parameter]
    public bool AllowUndefinedValues { get; set; } = true;

    [Parameter]
    public int Lines { get; set; } = 1; // For multiline text input

    [Parameter]
    public bool MultiSelection { get; set; } = false;

    [Parameter]
    public bool Disabled { get; set; } = false;

    bool error = false;
    public void SetError(bool newError)
    {
        if(error != newError)
        {
            error = newError;
            this.StateHasChanged();
        }
    }

    bool GetCompareBadgeVisibility()
    {
        if (typeof(T) == typeof(string))
            return ValueCompare != null && Value.ToString() != ValueCompare.ToString();

        var valStr = Value?.ToString();
        var cValStr = ValueCompare?.ToString();

        if (null == valStr || null == cValStr)
        {
            return false;
        }
        else if (valStr.StartsWith("-") || cValStr.StartsWith("-"))
        {
            var val = decimal.Parse(valStr);
            var cVal = decimal.Parse(cValStr);
            return val != cVal;
        }
        else
        {
            var val = decimal.Parse(valStr);
            var cVal = decimal.Parse(cValStr);
            return val != cVal;
        }
    }

    string? GetAdornmentIcon()
    {
        if (OnIdAdornmentClick.HasDelegate)
            return Icons.Material.Filled.Refresh;
        else if (OnInfoAdornmentClick.HasDelegate)
            return Icons.Material.Outlined.Info;
        else if (OnSearchAdornmentClick.HasDelegate)
            return Icons.Material.Filled.Search;
        else
            return null;
    }

    EventCallback GetOnAdornmentClick()
    {
        if (OnIdAdornmentClick.HasDelegate)
            return OnIdAdornmentClick;
        else if (OnInfoAdornmentClick.HasDelegate)
            return OnInfoAdornmentClick;
        else if (OnSearchAdornmentClick.HasDelegate)
            return OnSearchAdornmentClick;
        else
            return default(EventCallback);
    }

    Adornment GetAdornment()
    {
        if (OnIdAdornmentClick.HasDelegate || OnInfoAdornmentClick.HasDelegate || OnSearchAdornmentClick.HasDelegate)
            return Adornment.End;
        return Adornment.None;
    }

    async Task SetValueAsync(object newValue)
    {
        error = false;
        Value = (T)newValue;
        await ValueChanged.InvokeAsync(Value);
    }

    async Task SetValueAsync(T newValue)
    {
        error = false;
        Value = newValue;
        await ValueChanged.InvokeAsync(Value);
    }
}
