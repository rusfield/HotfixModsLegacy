@using RusBlazor.Components.MultiSelect
@typeparam T

<RusMultiSelect T="T" Value="selectedValues" ValueChanged="SelectedValuesChanged" OverrideValueText="OverrideValueText" GetOptionsAsync="GetOptionsAsync" GetSelectedOptionsAsync="GetSelectedOptionsAsync"  />


@code {

    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public Func<string, int, int, CancellationToken, Task<(SortedDictionary<T, string>, int)>> GetOptionsAsync { get; set; }

    [Parameter]
    public Func<List<T>, int, int, CancellationToken, Task<(SortedDictionary<T, string>, int)>> GetSelectedOptionsAsync { get; set; }

    List<T> selectedValues = new();

    protected override void OnParametersSet()
    {
        selectedValues.GetFlagsByValue(Value);
        base.OnParametersSet();
    }

    void SelectedValuesChanged(List<T> newValues)
    {
        selectedValues = newValues;
        Value = selectedValues.GetValueByFlags();
        ValueChanged.InvokeAsync(Value);
    }

    string OverrideValueText(List<T> selectedValues)
    {
        return Value.ToString();
    }
}