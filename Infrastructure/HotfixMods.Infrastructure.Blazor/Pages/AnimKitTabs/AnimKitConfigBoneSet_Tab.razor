@using HotfixMods.Core.Enums.Db2;
@using HotfixMods.Infrastructure.InfoModels
@using HotfixMods.Infrastructure.Blazor.Components.DtoContent
@inherits DtoContentBase<AnimKitDto, AnimKitConfigBoneSet>

<InstancedDtoContentPage>
    <MudItem xs="3">
        <Input_Element T="byte" @bind-Value="@(Value.AnimKitBoneSetID)" Label="@(nameof(Value.AnimKitBoneSetID).ToDisplayName())" ValueCompare="ValueCompare?.AnimKitBoneSetID" OnInfoAdornmentClick="@(OpenInfoDialog(info.AnimKitBoneSetID))" GetOptionsAsync_Func="GetAnimKitBoneSets" />
        <Input_Element T="ushort" @bind-Value="@(Value.AnimKitPriorityID)" Label="@(nameof(Value.AnimKitPriorityID).ToDisplayName())" ValueCompare="ValueCompare?.AnimKitPriorityID" OnInfoAdornmentClick="@(OpenInfoDialog(info.AnimKitPriorityID))" GetOptionsAsync_Func="GetAnimKitPriorities" />
    </MudItem>
    <MudItem xs="9" />
</InstancedDtoContentPage>

@code {
    AnimKitConfigBoneSetInfo info = new();

    async Task<Dictionary<byte, string>> GetAnimKitBoneSets()
    {
        return Enum.GetValues<AnimKitBoneSetId>().ToDictionary(key => (byte)key, value => value.ToDisplayString());
    }

    async Task<Dictionary<ushort, string>> GetAnimKitPriorities()
    {
        return Enum.GetValues<AnimKitPriorityId>()
        .ToDictionary(key => (ushort)key, value => value.ToDisplayString().Split()[1] + " " + value.ToDisplayString().Split()[0])
        .OrderBy(b => int.Parse(b.Value.Split(" ")[0]))
        .ToDictionary(x => x.Key, x => x.Value);
    }
}