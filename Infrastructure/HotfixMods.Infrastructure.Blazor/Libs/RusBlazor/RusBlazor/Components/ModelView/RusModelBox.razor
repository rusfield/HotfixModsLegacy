@using RusBlazor.Enums
@using RusBlazor.Components.Button

<div class="@($"rus-modelbox-container center-content")" style="@(PositionStyle())" @onclick="OnClick">
    <div class="rus-modelbox">
        <RusButton Color="ColorType()" Style="width:100%;height:100%;">
            @TableName
        </RusButton>
    </div>

    @if (Right != null)
    {
        <div class="@($"rus-modelbox-reference right {ColorType().ToString().ToLower()}-darken")" />
    }
    @if (Left != null)
    {
        <div class="@($"rus-modelbox-reference left {ColorType().ToString().ToLower()}-darken")" />
    }
    @if (Top != null)
    {
        <div class="@($"rus-modelbox-reference top {ColorType().ToString().ToLower()}-darken")" />
    }
    @if (Bottom != null)
    {
        <div class="@($"rus-modelbox-reference bottom {ColorType().ToString().ToLower()}-darken")" />
    }
</div>


@code {
    [Parameter]
    public string? TableName { get; set; }

    [Parameter]
    public ModelBoxStatus Status { get; set; } = ModelBoxStatus.ACTIVE;

    [Parameter]
    public int GridX { get; set; }

    [Parameter]
    public int GridY { get; set; }

    [Parameter]
    public (string, string)? Right { get; set; }

    [Parameter]
    public (string, string)? Left { get; set; }

    [Parameter]
    public (string, string)? Top { get; set; }

    [Parameter]
    public (string, string)? Bottom { get; set; }

    [Parameter]
    public EventCallback OnClick { get; set; }


    string PositionStyle()
    {
        return $"left:calc(var(--rus-modelbox-container-width) * {GridX});top:calc(var(--rus-modelbox-container-height) * {GridY});";
    }

    Color ColorType()
    {
        return Status switch
        {
            ModelBoxStatus.ACTIVE => Color.TERTIARY,
            ModelBoxStatus.INACTIVE => Color.DARK,
            ModelBoxStatus.REQUIRED => Color.PRIMARY,
            _ => Color.ERROR
        };
    }
}
