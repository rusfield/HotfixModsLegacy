@typeparam T

@using HotfixMods.Infrastructure.Blazor.Business
@using System.Linq

@if (null == options)
{
    <Placeholder_Element Visible="true" IsNested="true" Skeleton="false" Label="@Label" />
}
else
{
    <MudSelect @ref="mudSelectRef" Variant="@Variant" T="KeyValuePair<T, string>" Label="@Label" SelectedValues="selectedValues" SelectedValuesChanged="SetValuesAsync" HelperText="(select)" HelperTextOnFocus="true" Adornment="Adornment" AdornmentIcon="@AdornmentIcon" OnAdornmentClick="OnAdornmentClick" AnchorOrigin="Origin.BottomCenter" Error="Error" ErrorText="Select a valid value" Disabled="Disabled" Class="adornment-clickable helper-text-hover" MultiSelection="true" MultiSelectionTextFunc="@(new Func<List<string>, string>(SetSelectionText))">
        @foreach (var option in options)
        {
            if (!zeroIsDefined && option.Key.ToString() == default(T).ToString())
            {
                continue;
            }
            <MudSelectItem T="T" Style="@GetOptionStyle(option)" Value="@option.Key">
                <MudStack Spacing="0">
                    <MudText>
                        @(string.IsNullOrWhiteSpace(option.Value) ? option.Key : option.Value.Replace("_", "_\u200B"))
                    </MudText>
                    @if (ShowIdInOptions)
                    {
                        <MudText Typo="Typo.subtitle2" Style="color:var(--mud-palette-action-disabled)">
                            @option.Key
                        </MudText>
                    }
                </MudStack>
            </MudSelectItem>
        }
    </MudSelect>
}


@code
{
    [CascadingParameter(Name = "RefreshElement")]
    public bool RefreshElement { get; set; }

    [CascadingParameter(Name = "CurrentPageIndex")]
    public int CurrentPageIndex { get; set; } // Used to close menu when page index is changed, for paged tabs.

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public EventCallback<T?> ValueChanged { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    [Parameter]
    public Func<Task<Dictionary<T, string>>> GetOptionsAsync_Func { get; set; }

    [Parameter]
    public Func<Task<List<T>>>? GetExclusiveOptionsAsync_Func { get; set; }

    [Parameter]
    public string? AdornmentIcon { get; set; }

    [Parameter]
    public EventCallback OnAdornmentClick { get; set; }

    [Parameter]
    public Adornment Adornment { get; set; }

    [Parameter]
    public bool Error { get; set; } = false;

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public bool ShowIdInOptions { get; set; } = true;

    MudSelect<KeyValuePair<T, string>>? mudSelectRef;
    Dictionary<T, string>? options;
    List<KeyValuePair<T, string>> selectedValues = new();
    int previousPageIndex = 0;
    bool valueIsSigned = true;
    bool zeroIsDefined = true;
    List<T> exclusiveSelectValues = new();

    protected override void OnParametersSet()
    {
        if (previousPageIndex != CurrentPageIndex && mudSelectRef != null)
        {
            mudSelectRef.CloseMenu(false);
        }
        previousPageIndex = CurrentPageIndex;
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitOptions();
            this.StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task SetValuesAsync(IEnumerable<KeyValuePair<T, string>> newValues)
    {
        SetError(false);
        bool valueIsAdded = newValues.Except(selectedValues).Any();
        bool valueIsRemoved = selectedValues.Except(newValues).Any();

        if (!valueIsAdded && !valueIsRemoved)
        {
            // No changes
            return;
        }

        bool valueIsAddedAndExclusive = valueIsAdded && exclusiveSelectValues.Any(e => e.ToString() == newValues.Except(selectedValues).First().ToString());

        if (valueIsAddedAndExclusive)
        {
            var addedValue = newValues.Except(selectedValues).First();
            selectedValues.Clear();
            selectedValues.Add(addedValue);
            Value = addedValue.Key;
        }
        else
        {
            selectedValues = newValues.Where(v => !exclusiveSelectValues.Contains(v.Key)).ToList();
            if (valueIsSigned)
            {
                var sum = selectedValues.Sum(x => Convert.ToInt64(x));
                Value = (T)Convert.ChangeType(sum, typeof(T));
            }
            else
            {
                var sum = selectedValues.Sum(x => Convert.ToInt64(x));
                Value = (T)Convert.ChangeType(sum, typeof(T));
            }
        }

        await ValueChanged.InvokeAsync(Value);
    }

    void SetError(bool newError)
    {
        if (Error != newError)
        {
            Error = newError;
            this.StateHasChanged();
        }
    }

    string SetSelectionText(IEnumerable<string> selection)
    {
        int count = selection.Count();

        return count switch
        {
            0 => "None",
            1 => selection.First().ToDisplayName(),
            _ => $"{Value?.ToString()} ➜ {count} selected"
        };
    }

    List<T> GetFlagValues(T flag)
    {
        List<T> results = new();
        var type = typeof(T);
        valueIsSigned = type == typeof(sbyte) || type == typeof(short) || type == typeof(int) || type == typeof(long);

        if (valueIsSigned)
        {
            // If value is signed, it means it could have a negative value.
            // Flags are hard to work with when negative values are supported and used, so force value to be only the flag of the negative value if it is less than 0.
            long flagValue = (long)Convert.ChangeType(flag, typeof(long));

            if (flagValue <= 0)
            {
                results.Add(flag);
            }
        }
        else
        {
            ulong flagValue = (ulong)Convert.ChangeType(flag, typeof(ulong));
            if (flagValue == 0)
            {
                results.Add(flag);
            }
            else
            {
                for (int i = 0; i < sizeof(ulong) * 8; i++)
                {
                    ulong value = 1UL << i;
                    if ((flagValue & value) == value)
                    {
                        results.Add((T)Convert.ChangeType(value, typeof(T)));
                    }
                }
            }
        }

        return results;
    }

    async Task InitOptions()
    {
        options = await GetOptionsAsync_Func.Invoke();

        if (GetExclusiveOptionsAsync_Func != null)
            exclusiveSelectValues = await GetExclusiveOptionsAsync_Func.Invoke();

        if (!exclusiveSelectValues.Any(v => v.ToString() == "0"))
        {
            var defaultValue = (T)Convert.ChangeType("0", typeof(T));
            exclusiveSelectValues.Add(defaultValue);
        }

        // Init undefined values, in case they exist but are are just not yet supported by app
        if (typeof(T).IsPrimitive && typeof(T).IsValueType)
        {
            var minValueObject = typeof(T).GetField("MinValue").GetValue(null);
            var maxValueObject = typeof(T).GetField("MaxValue").GetValue(null);
            long signedItterationValue = 1;
            ulong unsignedItterationValue = 1;
            var maxValue = (ulong)Convert.ChangeType(maxValueObject, typeof(ulong));
            var minValue = (long)Convert.ChangeType(minValueObject, typeof(long));

            if (!options.ContainsKey(default(T)))
            {
                options[default(T)] = "None";
                zeroIsDefined = false;
            }

            do
            {
                var positiveKey = (T)Convert.ChangeType(unsignedItterationValue.ToString(), typeof(T));
                if (!options.ContainsKey(positiveKey))
                {
                    options.Add(positiveKey, $"{positiveKey} (Undefined)");
                }
                if (minValue < 0)
                {
                    var negativeKey = (T)Convert.ChangeType((signedItterationValue * -1).ToString(), typeof(T));
                    if (!options.ContainsKey(negativeKey))
                    {
                        options[negativeKey] = $"{negativeKey} (Undefined)";
                        exclusiveSelectValues.Add(negativeKey);
                    }
                    signedItterationValue *= 2;
                }
                unsignedItterationValue *= 2;
            }
            while (unsignedItterationValue < (maxValue / 2));
        }

        var flagValues = GetFlagValues(Value);
        selectedValues = flagValues.Where(x => options.ContainsKey(x)).Select(x => new KeyValuePair<T, string>(x, options[x])).ToList();
    }

    string GetOptionStyle(KeyValuePair<T, string> option)
    {
        if (option.Key.ToString().StartsWith("-") && option.Value.Contains("(Undefined)"))
            return "color:#0D47A1 !important"; // primary, Darken4 version
        else if (option.Value.Contains("(Undefined)"))
            return "color:var(--mud-palette-action-disabled) !important";
        else if (exclusiveSelectValues.Contains(option.Key))
            return "color:var(--mud-palette-info) !important";
        else
            return "color:var(--mud-palette-text-primary) !important";
    }
}