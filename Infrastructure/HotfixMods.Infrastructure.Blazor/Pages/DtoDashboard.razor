<MudTextField T="string" Placeholder="Filter" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Style="height:42px" />

<MudPaper Class="mud-theme-primary d-flex flex-column align-center" Elevation="4" Style="height:48px;" />
<MudTable Items="items" Hover="true" Striped="false" Filter="Filter" Height="736px" FixedHeader="true">
    <HeaderContent>
        <MudTh>Avatar</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>@IdTitle</MudTh>
        @if (!string.IsNullOrWhiteSpace(AdditionalIdTitle))
        {
            <MudTh>@AdditionalIdTitle</MudTh>
        }
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Avatar">@context.AvatarUrl</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="@IdTitle">@context.Id</MudTd>
        @if (!string.IsNullOrWhiteSpace(AdditionalIdTitle))
        {
            <MudTd DataLabel="@AdditionalIdTitle">@context.AdditionalId</MudTd>
        }
        <MudTd DataLabel="Action">BTN</MudTd>
    </RowTemplate>
</MudTable>
<MudPaper Class="mud-theme-primary d-flex flex-column align-center" Elevation="4" Style="height:48px;">
    <MudStack Justify="Justify.SpaceBetween" Row="true" Style="width:100%">
        <div />
        <MudPagination @ref="mudPaginationRef" @bind-Selected="currentPage" Size="Size.Medium" Count="items.Count" Color="Color.Info" @bind-Selected:after="Navigate" />
        <div />
    </MudStack>
</MudPaper>

@code {
    [Parameter]
    public string IdTitle { get; set; } = "ID";

    [Parameter]
    public string? AdditionalIdTitle { get; set; }

    int currentPage = 1;
    int pages = 1;
    int itemsPerPage = 10;
    MudPagination? mudPaginationRef;

    List<DashboardModel> items = new();
    string search;

    // Temp
    protected override void OnParametersSet()
    {
        for (int i = 0; i < 100; i++)
        {
            items.Add(new()
                {
                    AvatarUrl = "#",
                    Id = i,
                    AdditionalId = 100 + i,
                    Name = "Dummy " + i
                });
        }

        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        pages = (int)Math.Ceiling((double)(items.Count / itemsPerPage));
        base.OnAfterRender(firstRender);
    }


    private bool Filter(DashboardModel model)
    {
        if (string.IsNullOrWhiteSpace(search))
            return true;

        if (model.Name?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false)
            return true;

        if (model.Id.ToString().Contains(search))
            return true;

        if (model.AdditionalId?.ToString().Contains(search) ?? false)
            return true;

        return false;
    }

    void Navigate()
    {

    }
}