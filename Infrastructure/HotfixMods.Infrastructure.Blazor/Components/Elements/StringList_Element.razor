<MudMenu PopoverClass="@(Value.Count == 0 ? "invisible" : "mud-popover-open")" FullWidth="true" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="ListAnchorOrigin" TransformOrigin="ListTransformOrigin" Style="width:100%">
    <ActivatorContent>
        <MudBadge Origin="Origin.CenterRight" Overlap="true" Icon="@Icons.Material.Filled.ArrowBack" Color="@Color.Info" OnClick="@(() => SetValueAsync())" Visible="@(GetBadgeVisibility())" Style="width:100%" Class="@("cursor-pointer")">
            <MudTextField T="string" @ref="inputRef" onfocus="@Focused" OnBlur="@Unfocused" Label="@Label" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Add" AdornmentColor="Color.Default" OnAdornmentClick="Adornment_Click" />
        </MudBadge>
    </ActivatorContent>
    <ChildContent>
        <MudTable Items="@Value" Hover="true" Style="max-height:250px">
            <RowTemplate>
                <MudTd>@context</MudTd>
                <MudTd Style="text-align:right"><MudIcon Icon="@Icons.Material.Filled.Clear" onclick="@(() => Remove(@context))" Style="cursor:pointer" /></MudTd>
            </RowTemplate>
        </MudTable>
    </ChildContent>
</MudMenu>



@code {
    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public string SingularItemName { get; set; } = "item";

    [Parameter]
    public string PluralItemName { get; set; } = "items";

    [Parameter]
    public List<string> Value { get; set; }

    [Parameter]
    public List<string> ValueCompare { get; set; }

    [Parameter]
    public EventCallback<List<string>> ValueChanged { get; set; }

    [Parameter]
    public Origin ListAnchorOrigin { get; set; } = Origin.TopCenter;

    [Parameter]
    public Origin ListTransformOrigin { get; set; } = Origin.BottomCenter;

    [Parameter]
    public string CssClass { get; set; } = "";



    MudTextField<string?> inputRef;
    async Task Add()
    {
        if (!string.IsNullOrWhiteSpace(inputRef.Text))
        {
            if (!Value.Any(n => n == inputRef.Text))
                Value.Add(inputRef.Text);

            // await inputRef.BlurAsync(); // Check at home if this actually works
        }
        await SetText();
    }

    async Task Remove(string valueToRemove)
    {
        Value.Remove(valueToRemove);
        await SetText();
        this.StateHasChanged();
    }

    async Task SetText()
    {
        if (Value.Count == 0)
            inputRef.Text = null;
        else if (Value.Count == 1)
            inputRef.Text = $"{Value.Count} {SingularItemName}";
        else
            inputRef.Text = $"{Value.Count} {PluralItemName}";

        await ValueChanged.InvokeAsync(Value);
    }

    void Adornment_Click()
    {
        // This does nothing, but it makes the UI feel better with a + button.
        // In reality, value is added on unfocus.
        // Ideally, it should be added on click only, and not on unfocus. But Unfocused is triggered automatically right before Adornment_Click.
    }

    async Task Unfocused()
    {
        await Add();
    }

    void Focused()
    {
        inputRef.Text = "";
    }

    bool GetBadgeVisibility()
    {
        return ValueCompare != null && Value != null && !(Enumerable.SequenceEqual(Value, ValueCompare, StringComparer.OrdinalIgnoreCase));
    }

    async Task SetValueAsync()
    {
        Value = ValueCompare;
        await SetText();
    }
}