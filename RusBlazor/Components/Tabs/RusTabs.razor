<div class="rus-tabs">
    @if (TabItems.Any())
    {
        <div class="titles">
            @foreach (var tab in TabItems)
            {
                bool active = tab == ActiveTab;
                <div class="@($"rus-tabs-title {(active ? "active" : "")} {(tab.IsClosed ? "closed" : "")}")" @onclick="@(async () => await OpenTabAsync(tab))">
                    @if (!string.IsNullOrWhiteSpace(tab.IconName))
                    {
                        <div class="icon">
                            <RusIcon IconName="@tab.IconName" />
                        </div>
                    }
                    <span class="label">
                        @DisplayName(tab.Name)
                    </span>
                    @if (tab.IsClosable)
                    {
                        <div class="button">
                            <RusButton DefaultPadding="false" Style="@($"border-radius: 50%; height: 24px;")" OnClick="(async () => await CloseTabAsync(tab))">
                                <RusIcon IconName="close" />
                            </RusButton>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <div>No tabs available.</div>
    }
    <div class="dummy-scrollbar" />
</div>

<CascadingValue Value="this" Name="TabsContainer">
    @ChildContent
</CascadingValue>


@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public List<RusTabItem> TabItems { get; } = new();

    public RusTabItem? ActiveTab { get; set; }

    protected override void OnParametersSet()
    {
        if (TabItems.Any() && ActiveTab == null)
        {
            ActiveTab = TabItems.First();
        }
        base.OnParametersSet();
    }

    string DisplayName(string name)
    {
        name = name.ToUpper();
        /*
        if (name.Length > 12)
            return $"{name.Substring(0, 10)}...";
            */
        name = name + name + name + name;
        return name;
    }

    async Task CloseTabAsync(RusTabItem tab)
    {
        tab.IsClosed = true;

        var currentIndex = TabItems.IndexOf(tab);

        // Check if there is a tab after the current one, if not, set the previous tab as active
        if (currentIndex < TabItems.Count - 1)
            ActiveTab = TabItems[currentIndex + 1];
        else if (currentIndex > 0) // check to ensure the current tab is not also the first tab
            ActiveTab = TabItems[currentIndex - 1];
        else
            ActiveTab = null; // no other tabs are open

        await Task.Delay(200);
        TabItems.Remove(tab);
        this.StateHasChanged();
    }

    async Task OpenTabAsync(RusTabItem tab)
    {
        if (!tab.IsClosed)
            ActiveTab = tab;
    }
}