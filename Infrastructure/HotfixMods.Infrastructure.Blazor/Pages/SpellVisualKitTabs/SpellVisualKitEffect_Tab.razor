@using HotfixMods.Core.Enums.Db2;
@using HotfixMods.Infrastructure.InfoModels
@using HotfixMods.Infrastructure.Blazor.Components.DtoContent

@inherits DtoContentBase<SpellVisualKitDto, SpellVisualKitEffect>

<InstancedDtoContentPage>
    <MudItem xs="3" />
    <MudItem xs="6">
        <Placeholder_Element Amount="4" />
        <InlineGroup Merged="false" LeftContentWidth="15" RightContentWidth="15" MiddleContentWidth="70">
            <LeftContent />
            <MiddleContent>
                <Input_Element T="int" Value="Value.EffectType" ValueChanged="OnEffectTypeChanged" ValueCompare="ValueCompare?.EffectType" Label="@nameof(Value.EffectType).ToDisplayName()" GetOptionsAsync_Func="GetEffectTypes" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectType))" />
            </MiddleContent>
            <RightContent />
        </InlineGroup>
        <InlineGroup Merged="false" LeftContentWidth="25" RightContentWidth="25" MiddleContentWidth="50">
            <LeftContent />
            <MiddleContent>
                <Input_Element T="int" @bind-Value="Value.Effect" ValueCompare="ValueCompare?.Effect" Label="@nameof(Value.Effect).ToDisplayName()" Disabled="EffectIsDisabled()" OnInfoAdornmentClick="@(OpenInfoDialog(info.Effect))" />
            </MiddleContent>
            <RightContent />
        </InlineGroup>
    </MudItem>
    <MudItem xs="3" />
</InstancedDtoContentPage>

@code {
    [Parameter]
    public EventCallback<int> EffectTypeChanged { get; set; }

    SpellVisualKitEffectInfo info = new();

    async void OnEffectTypeChanged(int newEffectType)
    {
        Value.EffectType = newEffectType;
        await EffectTypeChanged.InvokeAsync(newEffectType);
    }

    bool EffectIsDisabled()
    {
        var effectIsDefined = Enum.IsDefined(typeof(SpellVisualEffectEffectType), Value.EffectType);
        var effectIsUnitSoundType = (Enum.IsDefined(typeof(SpellVisualEffectEffectType), Value.EffectType) && Value.EffectType == (int)SpellVisualEffectEffectType.UNIT_SOUND_TYPE);
        var effectIsSoundKitType = (Enum.IsDefined(typeof(SpellVisualEffectEffectType), Value.EffectType) && Value.EffectType == (int)SpellVisualEffectEffectType.SOUND_KIT);


        return effectIsDefined && !effectIsUnitSoundType && !effectIsSoundKitType;
    }

    async Task<Dictionary<int, string>> GetEffectTypes()
    {
        return Enum.GetValues<SpellVisualEffectEffectType>().ToDictionary(key => (int)key, value => value.ToDisplayString());
    }
}