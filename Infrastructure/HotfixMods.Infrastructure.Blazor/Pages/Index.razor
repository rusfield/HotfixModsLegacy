@page "/"
@using HotfixMods.Infrastructure.Blazor.PageData
@using HotfixMods.Infrastructure.Blazor.Components.Dialogs

@inject IDialogService DialogService

<MudTabs @ref="_mudTabsRef" Elevation="2" Centered="true" Color="Color.Dark" KeepPanelsAlive="true" Style="z-index:101">
    <Header>
        <MudTooltip Text="New">
            <MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" Style="color:var(--mud-palette-text-primary)" OnClick="NewTab_Click" />
        </MudTooltip>
    </Header>
    <ChildContent>
        @foreach (var (tab, index) in tabs.WithIndex())
        {
            <CascadingValue Name="PageTab" Value="tab">
                <MudTabPanel ID="@tab.TabId">
                    <ChildContent>
                        <MudContainer MaxWidth="MaxWidth.Large" Class="my-10 pt-10">
                            <DynamicComponent Type="tab.PageType" />
                        </MudContainer>
                    </ChildContent>
                    <TabContent>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" Style="width:100%;">
                            <MudText Typo="Typo.subtitle2">@tab.TabName.ToUpper()</MudText><MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Dark" onclick="@(() => CloseTab_Click(tab.TabId))" />
                        </MudStack>
                    </TabContent>
                </MudTabPanel>
            </CascadingValue>
        }
    </ChildContent>
</MudTabs>

<MudDrawer @bind-Open="@_menuOpen" Anchor="Anchor.Bottom" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6" Align="Align.Center" Style="width:100%">My App</MudText>
    </MudDrawerHeader>
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="3" Style="width:100%;">
        <MudIconButton Icon="@Icons.Material.Filled.MonitorHeart" Color="Color.Inherit" Size="Size.Small" />
        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" Size="Size.Small" />
        <MudText Color="Color.Inherit" Typo="Typo.h5">|</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.FaceRetouchingNatural" Color="Color.Inherit" Size="Size.Large" OnClick="@(() => OpenTab_Click(new PageTab("Creature", typeof(Creatures))))" />
        <MudIconButton Icon="@Icons.Material.Filled.LocalFireDepartment" Color="Color.Inherit" Size="Size.Large" OnClick="@(() => OpenTab_Click(new PageTab("Spell", typeof(Spells))))" />

            @*
        <MudIconButton Icon="@Icons.Material.Filled.Security" Color="Color.Inherit" Size="Size.Large" OnClick="@(() => OpenTab_Click(new PageTab<IDto>("Items", typeof(Items))))" />
        <MudIconButton Icon="@Icons.Material.Filled.OutlinedFlag" Color="Color.Inherit" Size="Size.Large" OnClick="@(() => OpenTab_Click(new PageTab<IDto>("Game Objects", typeof(Gameobjects))))" />
            *@

        <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
            <ActivatorContent>
                <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" Color="Color.Inherit" Size="Size.Large" Style="pointer-events: none;" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem OnClick="@(() => OpenTab_Click(new PageTab("Anim Kit", typeof(AnimKits))))">Anim Kits</MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenDialog_Click<AnimKitSearch_Dialog>(new PageTab("Anim Kit", typeof(AnimKits))))">Search Anim Kit</MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenDialog_Click<SpellSearch_Dialog>(new PageTab("Spell", typeof(Spells))))">Search Spells</MudMenuItem>

                @*
                <MudMenuItem OnClick="@(() => OpenTab_Click(new PageTab<IDto>("Spell Visual Kit", typeof(SpellVisualKits))))">Spell Visual Kits</MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenTab_Click(new PageTab<IDto>("Sound Kit", typeof(SoundKits))))">Sound Kits</MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenTab_Click(new PageTab<IDto>("Generic Hotfix", typeof(GenericHotfixes))))">Custom Hotfix</MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenDialog_Click<AnimKitSearch_Dialog>(new PageTab<IDto>("Anim Kit", typeof(AnimKits))))">Test</MudMenuItem>
                *@
            </ChildContent>
        </MudMenu>

        <MudText Color="Color.Inherit" Typo="Typo.h5">|</MudText>
        <MudText Color="Color.Inherit" Typo="Typo.subtitle2">Hotfix Mods</MudText>

    </MudStack>
</MudDrawer>

@code {
    MudTabs? _mudTabsRef;
    bool _menuOpen = false;
    List<PageTab> tabs = new();
    bool tabAdded = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (tabAdded)
        {
            tabAdded = false;
            _mudTabsRef?.ActivatePanel(tabs.Count - 1);
        }
        base.OnAfterRender(firstRender);
    }

    void NewTab_Click()
    {
        _menuOpen = true;
    }

    void OpenTab_Click(PageTab tab)
    {
        LaunchTab(tab);
    }

    void CloseTab_Click(Guid tabId)
    {
        tabs.RemoveAll(t => t.TabId == tabId);
    }

    void LaunchTab(PageTab tab)
    {
        _menuOpen = false;
        tabs.Add(tab);
        tabAdded = true;
    }

    async void OpenDialog_Click<TDialog>(PageTab pageTab)
    where TDialog : ComponentBase
    {
        var result = await DialogService.Show<TDialog>().Result;
        if (!result.Canceled && result.Data != null)
        {
            pageTab.Dto = (DtoBase)result.Data;
            pageTab.TabName = ((DtoBase)result.Data).GetDisplayName();
            LaunchTab(pageTab);
            this.StateHasChanged();
        }
    }
}