@using HotfixMods.Infrastructure.Blazor.Components.Private

@inject CreatureService Service

<DialogSearch @ref="dialogSearchRef" MudDialogInstance="Dialog">
    <MudText Typo="Typo.h6" Align="Align.Center">Search by Creature ID:</MudText>
        @if (isLoading)
    {
        <Placeholder_Element Amount="1" Visible="true" />
    }
    else
    {
        <MudNumericField @bind-Value="@Id" Variant="Variant.Outlined" HideSpinButtons="true" Label="ID" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" OnAdornmentClick="(GetAvailableOptionsAsync)" />
    }
    @if (options.Count > 0)
    {
        <MudSelect T="uint" ValueChanged="@(async (value) => await GetByIdAsync(value))">
            @foreach (var option in options)
            {
                <MudSelectItem Value="@option.Key">@option.Value</MudSelectItem>
            }
        </MudSelect>
    }
</DialogSearch>

@code {
    [CascadingParameter]
    MudDialogInstance Dialog { get; set; }

    [Parameter]
    public uint? Id { get; set; }

    [Parameter]
    public uint? Idx { get; set; }

    DialogSearch? dialogSearchRef;
    Dictionary<uint, string> options = new();
    bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        if(Id != null)
        {
            await GetByIdAsync(Idx ?? 0, true);
        }
        await base.OnInitializedAsync();
    }

    async Task GetByIdAsync(uint idx, bool closeOnFail = false)
    {
        if (Id != null)
        {
            var data = await Service.GetByIdAsync((uint)Id, idx, dialogSearchRef!.SetLoaderProgress);
            if (data != null || closeOnFail)
            {
                Dialog.Close(data);
            }
            else
            {
                dialogSearchRef.CancelLoaderWithMessage("No DB2 record found.");
            }
        }
    }

    async Task GetAvailableOptionsAsync()
    {
        isLoading = true;
        if (Id != null)
        {
            var availableOptions = await Service.GetAvailableDisplayOptions((uint)Id);
            if (availableOptions.Count > 1)
            {
                options = availableOptions;
            }
            else
            {
                await GetByIdAsync(0);
            }
        }
        isLoading = false;
    }
    
}
