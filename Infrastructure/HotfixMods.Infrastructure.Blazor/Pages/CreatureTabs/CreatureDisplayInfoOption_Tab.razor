@using HotfixMods.Core.Enums.Db2
@using HotfixMods.Infrastructure.Blazor.Components.DtoContent
@using HotfixMods.Infrastructure.InfoModels;

@inject CreatureService Service

<PagedDtoContent T="CreatureDisplayInfoOption" IsCustom="true">
    @for (int i = 0; i < amountOfCustomizationPages; i++)
    {
        int iVal = i;
        <PagedDtoContentPage>
            <MudItem xs="3">
                @for (int j = 0; j < 6; j++)
                {
                    int jVal = (16 * iVal) + j;
                    if (jVal >= customizations.Count)
                    {
                        <Placeholder_Element Amount="1" Visible="loading" />
                    }
                    else
                    {
                        var customization = customizations.ElementAt(jVal);
                        var bindValue = GetCreatureDisplayInfoOption(customization);
                        <Input_Element T="int" @bind-Value="bindValue.ChrCustomizationChoiceID" Label="@(customization.Key.Name)" GetOptionsAsync_Func="@(async () => await GetCustomizationChoices((int)customization.Key.ID))" />
                    }
                }
            </MudItem>
            <MudItem xs="6">
                <Placeholder_Element Amount="4" />

                @for (int j = 0; j < 4; j++)
                {
                    int jVal = (16 * iVal) + 12 + j;
                    if (j == 1 || j == 3)
                    {
                        <InlineGroup Merged="false">
                            <LeftContent>
                                @if (jVal - 1 >= customizations.Count)
                                {
                                    <Placeholder_Element Amount="1" Visible="loading" />
                                }
                                else
                                {
                                    var customization = customizations.ElementAt(jVal - 1);
                                    var bindValue = GetCreatureDisplayInfoOption(customization);
                                    <Input_Element T="int" @bind-Value="bindValue.ChrCustomizationChoiceID" Label="@(customization.Key.Name)" GetOptionsAsync_Func="@(async () => await GetCustomizationChoices((int)customization.Key.ID))" />
                                }
                            </LeftContent>
                            <RightContent>
                                @if (jVal >= customizations.Count)
                                {
                                    <Placeholder_Element Amount="1" Visible="loading" />
                                }
                                else
                                {
                                    var customization = customizations.ElementAt(jVal);
                                    var bindValue = GetCreatureDisplayInfoOption(customization);
                                    <Input_Element T="int" @bind-Value="bindValue.ChrCustomizationChoiceID" Label="@(customization.Key.Name)" GetOptionsAsync_Func="@(async () => await GetCustomizationChoices((int)customization.Key.ID))" />
                                }
                            </RightContent>


                        </InlineGroup>
                    }
                }
            </MudItem>
            <MudItem xs="3">
                @for (int j = 0; j < 6; j++)
                {
                    int jVal = (16 * iVal) + 6 + j;
                    if (jVal >= customizations.Count)
                    {
                        <Placeholder_Element Amount="1" Visible="loading" />
                    }
                    else
                    {
                        var customization = customizations.ElementAt(jVal);
                        var bindValue = GetCreatureDisplayInfoOption(customization);
                        <Input_Element T="int" @bind-Value="bindValue.ChrCustomizationChoiceID" Label="@(customization.Key.Name)" GetOptionsAsync_Func="@(async () => await GetCustomizationChoices((int)customization.Key.ID))" />
                    }
                }
            </MudItem>
        </PagedDtoContentPage>
    }
</PagedDtoContent>

@code {
    [CascadingParameter(Name = "PageTab")]
    public PageTab PageTab { get; set; }

    [CascadingParameter(Name = "ValueIsNull")]
    public bool ValueIsNull { get; set; }

    Dictionary<ChrCustomizationOption, List<ChrCustomizationChoice>> customizations = new();
    int amountOfCustomizationPages = 1;
    bool loading = true;
    List<CreatureDisplayInfoOption> values;
    CreatureDisplayInfoOptionInfo info = new();

    protected override void OnParametersSet()
    {
        values = PageTab.Dto.GetDtoListValue<CreatureDisplayInfoOption>();
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await SetValues();
        await base.OnAfterRenderAsync(firstRender);
    }


    async Task<Dictionary<int, string>> GetCustomizationChoices(int chrCustomizationOptionId)
    {
        if (customizations.Any(k => k.Key.ID == chrCustomizationOptionId))
        {
            return customizations.First(c => c.Key.ID == chrCustomizationOptionId).Value.ToDictionary(c => (int)c.ID, c => string.IsNullOrWhiteSpace(c.Name) ? c.ID.ToString() : $"{c.Name} ({c.ID})");
        }
        return new();
    }

    CreatureDisplayInfoOption GetCreatureDisplayInfoOption(KeyValuePair<ChrCustomizationOption, List<ChrCustomizationChoice>> customization)
    {
        if (!values.Any(v => v.ChrCustomizationOptionID == customization.Key.ID))
        {
            values.Add(new()
                {
                    ChrCustomizationOptionID = (int)customization.Key.ID,
                    ChrCustomizationChoiceID = (int)customization.Value.First().ID
                });
        }
        return values.Where(v => v.ChrCustomizationOptionID == customization.Key.ID).First();
    }

    async Task SetValues()
    {
        loading = true;
        var creatureDisplayInfoExtra = ((CreatureDto?)PageTab?.Dto)?.CreatureDisplayInfoExtra;
        if (creatureDisplayInfoExtra != null)
        {
            customizations = await Service.GetCustomizationOptions(creatureDisplayInfoExtra.DisplayRaceID, creatureDisplayInfoExtra.DisplaySexID);
        }
        else
        {
            customizations = new();
        }
        amountOfCustomizationPages = Math.Max((int)Math.Ceiling(customizations.Count / 16.0), 1); // Minimum 1 page
        loading = false;
        this.StateHasChanged();
    }
}