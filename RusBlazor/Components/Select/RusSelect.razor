@using RusBlazor.Components.Button
@using RusBlazor.Components.Icon

@typeparam T
@inject IJSRuntime JSRuntime

<div class="rus-select">
    <RusInput TValue="string" @ref="rusInput" @bind-Value="displayValue" ValueText="@(Value.ToString())" OnFocus="OnFocus" OnBlur="OnBlur" InputChanged="InputChanged" Disabled="loadingComponent" Active="inputActive" Label="@Label" />
    <RusMenu @ref="rusMenu" T="T" IsOpenChanged="ShowMenuChanged">
        <MenuTopContent>
            <RusMenuItem Hoverable="false">
                <div class="@("rus-select-button-group")">
                    <RusButton Style="width: 25%;" OnClick="ShowSelectedAsync">
                        <RusIcon IconName="done" />
                    </RusButton>
                    <RusButton Style="width: 25%;" OnClick="ResetFilterAsync">
                        <RusIcon IconName="filter_alt_off" />
                    </RusButton>
                </div>
            </RusMenuItem>
        </MenuTopContent>
        <MenuContent>
            @if (loadingSearch)
            {
                <RusMenuItem Hoverable="false">
                    <RusMenuItemContentLoading />
                </RusMenuItem>
            }
            else if (!filteredItems.Any())
            {
                <RusMenuItem Hoverable="false">
                    <RusMenuItemContentText Text="No results" />
                </RusMenuItem>
            }
            else
            {
                int itterator = 1;
                foreach (var item in filteredItems)
                {
                    <RusMenuItem OnItemClick="@(async () => await SelectItemAsync(item.Key, item.Value))" Id="@($"{rusMenu!.GetId()}-{item.Key.ToString()}")" Class="@(Value.Equals(item.Key) ? "selected" : "")" Separator="@(itterator++ < filteredItems.Count)">
                        <RusMenuItemContentKeyValue Key="@item.Key.ToString()" Value="@item.Value" />
                    </RusMenuItem>
                }
            }
        </MenuContent>
        <MenuBottomContent>
            <RusMenuItem Hoverable="false">
                <div class="rus-select-pagination-group">
                    <RusButton Style="width: 25%;" OnClick="PreviousPage" Disabled="currentPageIndex <= 0">
                        <RusIcon IconName="navigate_before" />
                    </RusButton>
                    <div class="rus-select-pagination-text">
                        @(new MarkupString(GetPaginationText()))
                    </div>
                    <RusButton Style="width: 25%;" OnClick="NextPage" Disabled="IsLastPageIndex()">
                        <RusIcon IconName="navigate_next" />
                    </RusButton>
                </div>
            </RusMenuItem>
        </MenuBottomContent>
    </RusMenu>
</div>

@code {
    [CascadingParameter(Name = "DisplayDbValue")]
    public bool DisplayDbValue { get; set; } = false;

    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public Func<T, string, int, int, CancellationToken, Task<(SortedDictionary<T, string>, int)>> GetOptionsAsync { get; set; }

    [Parameter] // Used to navigate to the page where selected value is.
    public Func<T, int, Task<int>> GetPageIndexByIdAsync { get; set; } = (_, __) => Task.FromResult(0);

    [Parameter] // Label over component
    public string Label { get; set; } = "";

    bool loadingComponent = true;
    bool loadingSearch = false;
    bool inputActive;
    string displayValue = "Loading";
    string? lastVerifiedDisplayValue;
    string lastInput = "";
    CancellationTokenSource? searchTokenSource;
    SortedDictionary<T, string> filteredItems = new();
    RusMenu<T>? rusMenu;
    RusInput<string>? rusInput;
    int pageSize = 15;
    int currentPageIndex = -1;
    int resultCount = -1;
    string? rusInputId;
    bool previouslyDisplayDbValue = false;


    protected override async Task OnParametersSetAsync()
    {
        if (GetOptionsAsync == null)
            throw new ParameterRequiredException(nameof(GetOptionsAsync));

        if (DisplayDbValue != previouslyDisplayDbValue)
        {
            previouslyDisplayDbValue = DisplayDbValue;
            if (!DisplayDbValue)
                displayValue = "Loading";

            await SetDisplayTextAsync();
        }
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Init default option
        if (firstRender)
        {
            rusInputId = rusInput?.GetId() ?? "";
            await SetDisplayTextAsync();
            loadingComponent = false;
            this.StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    void OnFocus()
    {
        InitSearch(0);
    }

    void OnBlur()
    {
        if(!rusMenu?.IsOpen ?? true)
            searchTokenSource?.Cancel();
    }

    void InputChanged(string input)
    {
        lastInput = input;
        InitSearch(150);
    }

    void NextPage()
    {
        currentPageIndex++;
        InitSearch(0);
    }

    void PreviousPage()
    {
        currentPageIndex--;
        InitSearch(0);
    }

    async Task ResetFilterAsync()
    {
        lastInput = "";
        InitSearch(0);
        await JSRuntime.InvokeVoidAsync("selectElement", rusInputId);
    }

    async Task ShowSelectedAsync()
    {
        currentPageIndex = -1;
        lastInput = "";
        InitSearch(0);
    }

    async void InitSearch(int searchDelayMs)
    {
        searchTokenSource?.Cancel();
        searchTokenSource = new CancellationTokenSource();
        CancellationToken cancellationToken = searchTokenSource.Token;

        try
        {
            if (searchDelayMs > 0)
                await Task.Delay(searchDelayMs, cancellationToken);

            if (!cancellationToken.IsCancellationRequested)
            {
                await SearchAsync(cancellationToken);
            }
        }
        catch (OperationCanceledException)
        {
            // Search cancelled cancelled
        }
    }

    async Task SearchAsync(CancellationToken token)
    {
        loadingSearch = true;
        await rusMenu.OpenAsync();
        string search = lastInput;
        try
        {
            // Happens on new searches
            if (currentPageIndex < 0)
                currentPageIndex = GetPageIndexByIdAsync != null ? await GetPageIndexByIdAsync(Value, pageSize) : 0;

            if (GetOptionsAsync != null)
                (filteredItems, resultCount) = await GetOptionsAsync.Invoke(Value, search, currentPageIndex, pageSize, token);

            // Adjust search so that a potential custom value is retrieved
            if (string.IsNullOrWhiteSpace(search))
                search = lastVerifiedDisplayValue ?? "";

            // TODO: Remove this, undefined values are returned in backend
            if (search.TryParseAsT<T>(out var value) && !filteredItems.ContainsKey(value))
                filteredItems.Add(value, $"Undefined ({value})");
        }
        catch (OperationCanceledException e)
        {
            // Search cancelled
        }
        loadingSearch = false;
        await InvokeAsync(StateHasChanged);
        if (filteredItems.ContainsKey(Value))
        {
            await JSRuntime.InvokeVoidAsync("scrollToElementInContainer", rusMenu!.GetId(), $"{rusMenu!.GetId()}-{Value.ToString()}", 150);
        }
    }

    async Task SelectItemAsync(T key, string value)
    {
        Value = key;
        await SetDisplayTextAsync();
        await rusMenu.CloseAsync();
        await ValueChanged.InvokeAsync(Value);
    }

    async Task ShowMenuChanged((bool, int) data)
    {
        bool showMenu = data.Item1;
        int animationDelay = data.Item2;
        inputActive = showMenu;
        if (!showMenu)
        {
            displayValue = lastVerifiedDisplayValue;
            lastInput = "";
            resultCount = -1;
            currentPageIndex = -1;
            this.StateHasChanged();
            await Task.Delay(animationDelay);
        }
    }

    string GetPaginationText()
    {
        if (resultCount == -1)
            return "&nbsp;<br />&nbsp;";

        int from = currentPageIndex * pageSize + 1;
        int to = (currentPageIndex + 1) * pageSize;

        to = to > resultCount ? resultCount : to;

        return $"{from} to {to}<br />of {resultCount}";
    }

    bool IsLastPageIndex()
    {
        return ((currentPageIndex + 1) * pageSize) >= resultCount;
    }

    async Task SetDisplayTextAsync()
    {
        if (DisplayDbValue)
        {
            displayValue = Value.ToString();
        }
        else if (filteredItems.ContainsKey(Value))
        {
            displayValue = filteredItems[Value];
        }
        else
        {
            (var currentValue, int tempCount) = await GetOptionsAsync(Value, Value.ToString(), 0, 1, CancellationToken.None);
            if (currentValue.ContainsKey(Value))
            {
                displayValue = currentValue[Value];
            }
            else
            {
                // Fallback, but backend should return a value
                displayValue = $"Unknown ({Value})";
            }
        }

        lastVerifiedDisplayValue = displayValue;
    }
}

