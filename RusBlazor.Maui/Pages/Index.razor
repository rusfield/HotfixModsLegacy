@using Extensions;

@page "/"


<RusSelect GetOptionsAsync="GetFruitsAsync" Value="2" />
<hr />
<RusFlagSelect GetOptionsAsync="GetFruitsMultiselectAsync" Value="2" />


@code{
    private int selectedItem = 0;
    private IEnumerable<string> selectedItems = new List<string>();

    async Task<Dictionary<int, string>> GetFruitsAsync(string search, int pageIndex, int pageSize, CancellationToken token)
    {
        await Task.Delay(1000, token);
        var results = new Dictionary<int, string>();
        int id = 1;
        foreach (var item in items)
        {
            token.ThrowIfCancellationRequested();

            if (item.Contains(search, StringComparison.InvariantCultureIgnoreCase))
                results.Add(id, item);

            if (search.TryParseAsT<int>(out var value) && id == value && !results.ContainsKey(value))
                results.Add(id, item);

            id++;
        }
        return results.Skip(pageIndex * pageSize).Take(pageSize).ToDictionary(k => k.Key, v => v.Value);
    }

    async Task<Dictionary<int, string>> GetFruitsMultiselectAsync(string search, int pageIndex, int pageSize, CancellationToken token)
    {
        await Task.Delay(500, token);
        var results = new Dictionary<int, string>();
        int id = 1;
        foreach (var item in items)
        {
            token.ThrowIfCancellationRequested();
            if (item.Contains(search, StringComparison.InvariantCultureIgnoreCase))
                results.Add(id, item);

            if (search.TryParseAsT<int>(out var value) && id == value && !results.ContainsKey(value))
                results.Add(id, item);

            id = id * 2;
        }
        return results.Skip(pageIndex * pageSize).Take(pageSize).ToDictionary(k => k.Key, v => v.Value);
    }

    private List<string> items = new List<string>
    {
        "Apple",
        "Banana",
        "Cherry",
        "Date",
        "Fig",
        "Grape",
        "Kiwi",
        "Lemon",
        "Mango",
        "Nectarine",
        "Orange",
        "Papaya",
        "Pineapple",
        "Raspberry",
        "Strawberry",
        "Watermelon Watermelon Watermelon Watermelon Watermelon Watermelon Watermelon Watermelon Watermelon Watermelon Watermelon Watermelon"
    };
}