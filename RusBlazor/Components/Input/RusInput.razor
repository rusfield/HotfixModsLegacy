@using RusBlazor.Enums
@using RusBlazor.Components.Helpers
@using RusBlazor.Wrappers

@typeparam TValue
@inherits InputBase<TValue>

@inject IJSRuntime JSRuntime
<div class="@($"rus-input-label {ActiveClass()} {DisabledClass()}")">
    @Label
</div>
<div class="@($"rus-input-container {Class} {ActiveClass()} {DisabledClass()}")" style="@($"{BorderRadiusStyle()} {Style}")" @onclick="FocusInputAsync">
    <input id="@id" @bind="Value" @onfocus="@HandleFocusAsync" @onblur="@HandleBlurAsync" @oninput="@OnInput" class="@($"rus-input")" disabled="@(Disabled || Loading)" />
    @if (Loading)
    {
        <div class="rus-input-loader">
            <RusLoader Color="Enums.Color.LIGHT" />
        </div>
    }
</div>

@if (DisplayCompareValueButton())
{
    <RusCompareButton OnClick="CompareButtonClick" />
}

@code {
    [Parameter]
    public CompareWrapper<TValue> CompareValue { get; set; }

    [Parameter]
    public EventCallback OnFocus { get; set; }

    [Parameter]
    public EventCallback OnBlur { get; set; }

    [Parameter]
    public EventCallback<string> InputChanged { get; set; }

    [Parameter]
    public string ValueText { get; set; } = "";

    [Parameter]
    public string Label { get; set; } = "";

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public bool Loading { get; set; } = false;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter] // Used for handling active from the outside, for example menus which frequently loses focus of input
    public bool? Active { get; set; }

    [Parameter]
    public BorderRadius BorderRadius { get; set; } = Enums.BorderRadius.ALL;

    string id;
    bool focused = false;

    public RusInput()
    {
        id = Guid.NewGuid().ToString();
    }

    void OnInput(ChangeEventArgs args)
    {
        InputChanged.InvokeAsync(args.Value.ToString());
    }

    public string GetId()
    {
        return id;
    }

    string ActiveClass()
    {
        if (Active != null)
        {
            return (bool)Active ? "active" : "";
        }
        else
        {
            return focused ? "active" : "";
        }
    }

    string BorderRadiusStyle()
    {
        int borderRadiusValue = 5;
        return BorderRadius switch
        {
            BorderRadius.ALL => $"border-radius:{borderRadiusValue}px;",
            BorderRadius.LEFT => $"border-top-left-radius:{borderRadiusValue}px;border-bottom-left-radius:{borderRadiusValue}px;",
            BorderRadius.RIGHT => $"border-top-right-radius:{borderRadiusValue}px;border-bottom-right-radius:{borderRadiusValue}px;",
            _ => "" // NONE or undefined
        };
    }

    string DisabledClass()
    {
        return Disabled || Loading ? "disabled" : "";
    }

    async Task HandleFocusAsync()
    {
        focused = true;
        this.StateHasChanged();
        if (OnFocus.HasDelegate)
        {
            await OnFocus.InvokeAsync();
        }
    }

    async Task HandleBlurAsync()
    {
        focused = false;
        this.StateHasChanged();
        if (OnBlur.HasDelegate)
        {
            await OnBlur.InvokeAsync();
        }
    }

    async Task FocusInputAsync()
    {
        await JSRuntime.InvokeVoidAsync("selectElement", id);
    }

    protected override bool TryParseValueFromString(string value, out TValue result, out string validationErrorMessage)
    {
        throw new NotImplementedException();
    }

    bool DisplayCompareValueButton()
    {
        bool elementInUse = focused || (Active ?? false);
        bool valueValidAndDifferent = CompareValue != null && !Value.Equals(CompareValue.Value);
        return !elementInUse && valueValidAndDifferent;
    }

    async void CompareButtonClick()
    {
        if(CompareValue != null)
        {
            Value = CompareValue.Value;
            await ValueChanged.InvokeAsync(Value);
        }
    }
}
