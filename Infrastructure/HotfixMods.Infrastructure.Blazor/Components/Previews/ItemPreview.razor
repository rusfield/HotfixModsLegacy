@using HotfixMods.Infrastructure.Extensions

@inject ItemService Service

<MudPaper Elevation="3" Class="rounded-lg ma-5 pa-5" Style="height: 360px; width: 400px">
    @if (dto.ItemSparse == null)
    {
        <MudStack Justify="Justify.Center" Spacing="5">
            <MudText Align="Align.Center">
                <MudIcon Icon="@Icons.Material.Outlined.Info" />
            </MudText>
            <MudText Align="Align.Center">
                Initialize ItemSparse to preview tooltip
            </MudText>
        </MudStack>
    }
    else
    {
        <MudStack Spacing="0">
            <MudText Style="@(GetNameCss())">
                <strong>
                    @GetName()
                </strong>
            </MudText>
            <MudText Style="color:#FFD100">
                @GetItemLevel()
            </MudText>
            <MudText>
                @GetBonding()
            </MudText>
            <MudText>
                <pre>
                    @GetStats()
                </pre>
            </MudText>


            <MudText>
                @GetRequiredLevel()
            </MudText>
            <MudText Style="color:#FFD100">
                @GetDescription()
            </MudText>
        </MudStack>
    }
</MudPaper>

@code {
    [CascadingParameter(Name = "PageTab")]
    public PageTab PageTab { get; set; }

    Dictionary<sbyte, string> stats = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        stats = await Service.GetStatModifierBonusStatOptionsAsync();
        base.OnAfterRender(firstRender);
    }


    protected override void OnParametersSet()
    {
        dto = (ItemDto)PageTab.Dto;
        base.OnParametersSet();
    }

    ItemDto dto;




    string GetName()
    {
        return dto.ItemSparse?.Display ?? "";
    }

    string GetNameCss()
    {
        string css = "font-size:calc(var(--mud-typography-body1-size)*1.1);color:#";
        css += (dto.ItemSparse?.OverallQualityID ?? 1) switch
        {
            0 => "9D9D9D",
            // 1 is default
            2 => "1EFF00",
            3 => "0070DD",
            4 => "A335EE",
            5 => "FF8000",
            6 => "E6CC80",
            7 => "00CCFF",
            8 => "00CCFF",
            _ => "FFFFFF"
        };

        return css;
    }

    string GetStats()
    {
        string result = "";
        if (dto.ItemSparse == null)
            return result;

        if (dto.ItemSparse.StatPercentEditor0 != 0)
        {
            var value = dto.ItemSparse.StatPercentEditor0;
            var stat = dto.ItemSparse.StatModifier_BonusStat0;
            result += value.ToStringWithSign();
            if (stats.ContainsKey(stat))
                result += $" {stats[stat]}";
            result += "\n";
        }
        return result;
    }

    string GetItemLevel()
    {
        return dto.ItemSparse != null ? $"Item Level {dto.ItemSparse?.ItemLevel}" : "";
    }

    string GetBonding()
    {
        int bonding = dto.ItemSparse?.Bonding ?? 0;
        return bonding switch
        {
            // 0 is hidden
            1 => "Binds when picked up",
            2 => "Binds when equipped",
            3 => "Binds when used",
            4 => "Quest Item",
            _ => ""
        };
    }

    string GetRequiredLevel()
    {
        return dto.ItemSparse != null && dto.ItemSparse.RequiredLevel > 0 ? $"Requires Level {dto.ItemSparse.RequiredLevel}" : "";
    }

    string GetDescription()
    {
        return string.IsNullOrWhiteSpace(dto.ItemSparse?.Description) ? "" : $"\"{dto.ItemSparse.Description}\"";
    }
}