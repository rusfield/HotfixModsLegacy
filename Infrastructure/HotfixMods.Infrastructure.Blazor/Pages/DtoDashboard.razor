@using HotfixMods.Infrastructure.Blazor.Handlers

@inject ISnackbar Snackbar

@typeparam TDto where TDto : IDto

<MudGrid Class="mb-1 px-3" Style="height:36.5px">
    <MudItem xs="4">
        <MudStack Row="true" Justify="Justify.FlexStart">
            <MudTextField T="string" Placeholder="Filter" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Style="height:36.5px;position:absolite;top:-6px;" Value="search" Immediate="true" ValueChanged="Filter" />
        </MudStack>
    </MudItem>
    <MudItem xs="4">
        <MudText Typo="Typo.h4" Align="Align.Center" Style="width:100%;font-size:2.5rem;position:relative;top:-13px;">
            @PageTab.TabName
        </MudText>
    </MudItem>
    <MudItem xs="4">
        <MudStack Row="true" Justify="Justify.FlexEnd">
            <MudButton Variant="Variant.Filled" Color="Color.Success">New</MudButton>
        </MudStack>
    </MudItem>
</MudGrid>

<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" Class="tab-bar" />

<MudTable Items="filteredItems" Hover="true" Striped="false" Height="640px" FixedHeader="true" Class="rounded-0 mx-3">
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh Style="text-align: center">Name</MudTh>
        <MudTh Style="text-align: center">@IdTitle</MudTh>
        @if (!string.IsNullOrWhiteSpace(AdditionalIdTitle))
        {
            <MudTh Style="text-align: center">@AdditionalIdTitle</MudTh>
        }
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Avatar" Style="text-align:left">@context.AvatarUrl</MudTd>
        <MudTd DataLabel="Name" Style="text-align: center">@context.Name</MudTd>
        <MudTd DataLabel="@IdTitle" Style="text-align: center">@context.ID</MudTd>
        @if (!string.IsNullOrWhiteSpace(AdditionalIdTitle))
        {
            <MudTd Style="text-align: center" DataLabel="@AdditionalIdTitle">@context.AdditionalID</MudTd>
        }
        <MudTd DataLabel="Action" Style="text-align:right">
            @if (idInAction.Contains(context.ID))
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
            else
            {
                <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" OnClick="@(async () => await EditAsync_Click(context.ID))" />
                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(async () => await DeleteAsync_Click(context.ID))" />
            }
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Nothing to see here</MudText>
    </NoRecordsContent>
</MudTable>
<MudPaper Class="mud-theme-primary d-flex flex-column align-center" Elevation="4" Style="height:48px;" />

@code {
    [CascadingParameter(Name = "PageTab")]
    public PageTab PageTab { get; set; }

    [Parameter]
    public string IdTitle { get; set; } = "ID";

    [Parameter]
    public string? AdditionalIdTitle { get; set; }

    [Parameter]
    public Func<uint, Action<string, string, int>, Task<TDto>> GetByIdAsync_Func { get; set; }

    [Parameter]
    public Func<uint, Action<string, string, int>, Task<bool>> DeleteByIdAsync_Func { get; set; }

    [Parameter]
    public Func<Task<List<DashboardModel>>> GetItemsAsync_Func { get; set; }

    [Parameter]
    public Type LaunchType { get; set; }

    List<DashboardModel> items;
    List<DashboardModel> filteredItems = new();
    string search;
    List<uint> idInAction = new();

    protected async override Task OnInitializedAsync()
    {
        items = await GetItemsAsync_Func();
        filteredItems = items;
        await base.OnInitializedAsync();
    }

    async Task EditAsync_Click(uint id)
    {
        idInAction.Add(id);
        var dto = await GetByIdAsync_Func(id, null);
        if (dto != null)
        {
            TabHandler.LaunchTab(new PageTab(dto.HotfixModsEntity.Name, LaunchType));
        }
        else
        {
            Snackbar.Add("Entity not found.", Severity.Error);
        }
        await Task.Delay(500);
        idInAction.Remove(id);
    }

    async Task DeleteAsync_Click(uint id)
    {
        idInAction.Add(id);
        await Task.Delay(500);
        Snackbar.Add("Entity deleted.", Severity.Info);
        items.RemoveAll(i => i.ID == id);
        filteredItems.RemoveAll(i => i.ID == id);
        idInAction.Remove(id);
    }

    void Filter(string filter)
    {
        search = filter;
        filteredItems = items.Where(i => (i.Name != null && i.Name.Contains(filter)) || i.ID.ToString().Contains(filter)).ToList();
    }

}