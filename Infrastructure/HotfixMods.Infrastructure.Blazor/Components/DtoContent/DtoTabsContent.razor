@typeparam T where T : IDto
@using System.Reflection
@using HotfixMods.Infrastructure.Blazor.Pages.Shared;

@inject ISnackbar Snackbar

<MudGrid Class="mb-1 px-3">
    <MudItem xs="4">
        <MudStack Row="true" Justify="Justify.FlexStart">
            <MudButton Variant="@(PageTab.DtoCompare != null ? Variant.Filled : Variant.Outlined)" Color="Color.Info" OnClick="ValueCompare_Callback">Compare</MudButton>
        </MudStack>
    </MudItem>
    <MudItem xs="4">
        <MudText Typo="Typo.h4" Align="Align.Center" Style="width:100%">
            @PageTab.TabName
        </MudText>
    </MudItem>
    <MudItem xs="4">
        <MudStack Row="true" Justify="Justify.FlexEnd">
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveAsync_Click">
                @if (saving)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
                else
                {
                    @(PageTab.Dto.IsUpdate ? "Update" : "Save")
                }
            </MudButton>
        </MudStack>
    </MudItem>
</MudGrid>
<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" Class="tab-bar" ActivePanelIndexChanged="PanelTabChanged">
    @foreach (var tab in tabs)
    {
        <MudTabPanel Class="custom-mud-tabs">
            <TabContent>
                <TabTitle_Element Title="@tab.TabPanelName" />
            </TabContent>
        </MudTabPanel>
    }
</MudTabs>
<MudPaper Style="height:640px;background-color:var(--mud-palette-surface)" Class="mx-3 rounded-0">
    <MudCarousel @ref="mudCarouselRef" Style="position:fixed;width:100vw; height:640px;left:0" TData="object" ShowArrows="false" ShowBullets="false" AutoCycle="false" SelectedIndexChanged="PanelContentChanged">
        @foreach (var tab in tabs)
        {
            var instance = GetInstanceData(tab.GroupType);

            <MudCarouselItem Transition="Transition.Custom" CustomTransitionEnter="transition-tab" CustomTransitionExit="transition-fade">
                <div style="width:1232px; margin: 0 auto;">
                    @if (null == instance)
                    {
                        <DynamicComponent Type="tab.ComponentType" />
                    }
                    else
                    {
                        <CascadingValue Name="InstanceData" Value="instance">
                            <DynamicComponent Type="tab.ComponentType" />
                        </CascadingValue>
                    }
                </div>
            </MudCarouselItem>
        }
    </MudCarousel>
</MudPaper>
<MudPaper Class="mud-theme-primary d-flex flex-column align-center" Elevation="4" Style="height:48px;">
    <MudStack Justify="Justify.SpaceBetween" Row="true" Style="width:100%">
        <MudStack Row="true" Class="invisible" Spacing="0">
            @* Space placeholders *@
            <MudIconButton Icon="@Icons.Material.Filled.CropFree" />
            <MudIconButton Icon="@Icons.Material.Filled.CropFree" />
            <MudIconButton Icon="@Icons.Material.Filled.CropFree" />
            <MudIconButton Icon="@Icons.Material.Filled.CropFree" />
        </MudStack>
        <MudPagination @ref="mudPaginationRef" @bind-Selected="currentPage" Size="Size.Medium" Count="currentInstanceData?.InstanceCount ?? 0" Color="Color.Info" Class="@(currentInstanceData == null || currentInstanceData.InstanceCount <= 0 ? "invisible" : "")" @bind-Selected:after="NavigateInstance" />
        <MudStack Row="true" Spacing="0" Class="@(currentInstanceData == null ? "invisible" : "")">
            <MudIconButton Icon="@Icons.Material.Filled.MoveDown" Style="color:var(--mud-palette-text-primary);transform: rotate(90deg)" Disabled="currentInstanceData == null || currentInstanceData.CurrentInstance <= 1" OnClick="MoveInstanceBackward_Click" />
            <MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline" OnClick="RemoveInstance_Click" Disabled="currentInstanceData == null ||  currentInstanceData.InstanceCount <= 0" />
            <MudIconButton Icon="@Icons.Material.Filled.ControlPointDuplicate" OnClick="CloneInstance_Click" Disabled="currentInstanceData == null ||  currentInstanceData.InstanceCount <= 0" />
            <MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" OnClick="AddInstance_Click" />
            <MudIconButton Icon="@Icons.Material.Filled.MoveUp" Style="color:var(--mud-palette-text-primary);transform: rotate(90deg)" Disabled="currentInstanceData == null || currentInstanceData.CurrentInstance >= currentInstanceData.InstanceCount" OnClick="MoveInstanceForward_Click" />
        </MudStack>
    </MudStack>
</MudPaper>

@code {
    [CascadingParameter(Name = "PageTab")]
    public PageTab PageTab { get; set; }

    [Parameter]
    public EventCallback SaveAsync_Callback { get; set; }

    [Parameter]
    public EventCallback ValueCompare_Callback { get; set; }

    List<Content> tabs = new();
    MudCarousel<object>? mudCarouselRef;
    MudPagination? mudPaginationRef;
    Dictionary<Type, InstanceData> instanceData = new();
    InstanceData? currentInstanceData;
    int currentPage = 1;
    bool saving = false;

    protected override void OnInitialized()
    {
        var properties = typeof(T).GetProperties();

        // Hardcode in the shared HotfixMods entity tab
        tabs.Add(new Content(nameof(HotfixModsEntity), typeof(HotfixModsEntity_Tab<T>), null));

        InitTabsList(properties);

        base.OnInitialized();
    }

    // Recusrive method to extract properties from DTO and DTO group lists
    void InitTabsList(PropertyInfo[] properties, Type? groupType = null)
    {
        foreach (var (property, index) in properties.WithIndex())
        {
            if (property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(List<>) && property.Name.EndsWith("groups", StringComparison.OrdinalIgnoreCase))
            {
                groupType = property.PropertyType.GetGenericArguments()[0];

                if (!instanceData.ContainsKey(groupType))
                {
                    var count = PageTab.Dto.GetDtoGroup(groupType).Count;
                    instanceData[groupType] = new(groupType, 1, count);
                }


                var groupProperties = groupType.GetProperties();
                InitTabsList(groupProperties, groupType);
            }
            else
            {
                var tabName = property.Name;
                var tabType = TryGetTabType(tabName);
                if (null == tabType)
                    continue;
                tabs.Add(new Content(tabName, tabType, groupType));
            }
        }
    }

    Type? TryGetTabType(string propertyName)
    {
        string pagesNamespace = "HotfixMods.Infrastructure.Blazor.Pages";
        pagesNamespace += $".{typeof(T).Name.Replace("Dto", "")}Tabs";
        var type = Type.GetType($"{pagesNamespace}.{propertyName}_Tab");

        return type;
    }

    void PanelTabChanged(int newIndex)
    {
        var tab = tabs[newIndex];
        mudCarouselRef?.MoveTo(newIndex);
    }

    void PanelContentChanged(int newIndex)
    {
        var tab = tabs[newIndex];
        currentInstanceData = GetInstanceData(tab.GroupType);
        currentPage = currentInstanceData?.CurrentInstance ?? 1;
    }

    void NavigateInstance()
    {
        if (currentInstanceData != null)
        {
            currentInstanceData.CurrentInstance = currentPage;
        }
    }

    void AddInstance_Click()
    {
        if (currentInstanceData != null)
        {
            PageTab.Dto.AddToGroup(currentInstanceData.GroupType, currentInstanceData.CurrentInstance - 1);
            currentInstanceData.InstanceCount++;
            currentInstanceData.CurrentInstance++;
            currentPage = currentInstanceData.CurrentInstance;
        }
    }

    void CloneInstance_Click()
    {
        if (currentInstanceData != null)
        {
            PageTab.Dto.CloneInGroup(currentInstanceData.GroupType, currentInstanceData.CurrentInstance - 1);
            currentInstanceData.InstanceCount++;
            currentInstanceData.CurrentInstance++;
            currentPage = currentInstanceData.CurrentInstance;
        }
    }

    void RemoveInstance_Click()
    {
        if (currentInstanceData != null)
        {
            PageTab.Dto.RemoveFromGroup(currentInstanceData.GroupType, currentInstanceData.CurrentInstance - 1);
            currentInstanceData.InstanceCount--;
            if (currentInstanceData.InstanceCount == 0)
            {
                currentInstanceData.CurrentInstance = 1;
            }
            else if (currentInstanceData.CurrentInstance == 1)
            {
                // Do nothing
            }
            else
            {
                currentInstanceData.CurrentInstance--;
            }
            currentPage = currentInstanceData.CurrentInstance;
        }
    }

    void MoveInstanceForward_Click()
    {
        int currentIndex = currentInstanceData.CurrentInstance - 1;
        int newIndex = currentInstanceData.CurrentInstance;
        PageTab.Dto.MoveInGroup(currentInstanceData.GroupType, currentIndex, newIndex);
        currentInstanceData.CurrentInstance++;
        currentPage = currentInstanceData.CurrentInstance;
    }

    void MoveInstanceBackward_Click()
    {
        int currentIndex = currentInstanceData.CurrentInstance - 1;
        int newIndex = currentInstanceData.CurrentInstance - 2;
        PageTab.Dto.MoveInGroup(currentInstanceData.GroupType, currentIndex, newIndex);
        currentInstanceData.CurrentInstance--;
        currentPage = currentInstanceData.CurrentInstance;
    }

    InstanceData? GetInstanceData(Type? groupType)
    {
        if (groupType != null && instanceData.ContainsKey(groupType))
            return instanceData[groupType];
        return null;
    }

    class Content
    {
        public Content(string tabPanelName, Type componentType, Type? groupType)
        {
            TabPanelName = tabPanelName;
            ComponentType = componentType;
            GroupType = groupType;
        }
        public string TabPanelName { get; set; }
        public Type ComponentType { get; set; }
        public Type? GroupType { get; set; }
    }

    async Task SaveAsync_Click()
    {
        saving = true;
        await SaveAsync_Callback.InvokeAsync();
        await Task.Delay(500); // UI trick to make saving more user friendly
        saving = false;
        Snackbar.Add($"Saved.", Severity.Info, config => { config.Icon = Icons.Material.Filled.Check; });
    }
}
