@typeparam T where T : struct, Enum

<MudBadge Origin="Origin.CenterRight" Overlap="true" Icon="@Icons.Material.Filled.ArrowBack" Color="@Color.Info" OnClick="@(() => SetValueAsync(((T)ValueCompare).ToValues()))" Visible="@(GetBadgeVisibility())" Style="width:100%" Class="@("cursor-pointer")">
    <MudSelect T="T" @bind-Value="internalValue" SelectedValuesChanged="SetValueAsync" SelectedValues="@selectedValues" MultiSelectionTextFunc="@(new Func<List<string>, string>(SetSelectionText))" Label="@Label" AnchorOrigin="Origin.BottomCenter" Variant="@Variant" MultiSelection="true">
        @foreach (var item in options)
        {
            <MudSelectItem T="T" Value="@item.Key">@item.Value</MudSelectItem>
        }
    </MudSelect>
</MudBadge>

@code
{
    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    [Parameter]
    public T? Value { get; set; } // Flag value

    [Parameter]
    public T? ValueCompare { get; set; }

    [Parameter]
    public EventCallback<T?> ValueChanged { get; set; }


    IEnumerable<T> selectedValues;
    Dictionary<T, string> options;
    T internalValue;
    protected override void OnInitialized()
    {
        var enumValues = Enum.GetValues(Nullable.GetUnderlyingType(typeof(T)) ?? typeof(T));
        options = enumValues.Cast<T>().ToDictionary(e => e, v => v.ToDisplayString());

        if (Value != null)
            selectedValues = ((T)Value).ToValues();

        base.OnInitialized();
    }



    async Task SetValueAsync(IEnumerable<T> newValues)
    {
        selectedValues = newValues;
        Value = selectedValues.ToMask();
        internalValue = (T)Value;
        await ValueChanged.InvokeAsync(Value);
    }

    string SetSelectionText(IEnumerable<string> selection)
    {
        var output = selection.ToList();
        for (int i = 0; i < output.Count; i++)
            output[i] = output[i].ToDisplayString();
        return string.Join(", ", output);
    }

    bool GetBadgeVisibility()
    {
        return Value != null && ValueCompare != null && (long)(object)Value.Value != (long)(object)ValueCompare.Value;
    }
}