@typeparam T

@using HotfixMods.Infrastructure.Blazor.Business
@using System.Linq

@if (null == options)
{
    <Placeholder_Element Visible="true" IsNested="true" />
}
else
{
    <MudSelect Variant="@Variant" T="T" Label="@Label" SelectedValues="selectedValues" SelectedValuesChanged="SetValuesAsync" HelperText="(select)" HelperTextOnFocus="true" Adornment="Adornment" AdornmentIcon="@AdornmentIcon" OnAdornmentClick="OnAdornmentClick" AnchorOrigin="Origin.BottomCenter" Error="Error" ErrorText="Select a valid value" Disabled="Disabled" Class="adornment-clickable" MultiSelection="true" MultiSelectionTextFunc="@(new Func<List<string>, string>(SetSelectionText))">
        @foreach (var option in options)
        {
            <MudSelectItem T="T" Value="@option.Key">@option.Value</MudSelectItem>
        }
    </MudSelect>
}


@code
{
    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public EventCallback<T?> ValueChanged { get; set; }

    [Parameter]
    public Variant Variant { get; set; } = Variant.Outlined;

    [Parameter]
    public Func<Task<Dictionary<T, string>>> GetOptionsAsync_Func { get; set; }

    [Parameter]
    public string? AdornmentIcon { get; set; }

    [Parameter]
    public EventCallback OnAdornmentClick { get; set; }

    [Parameter]
    public Adornment Adornment { get; set; }

    [Parameter]
    public bool Error { get; set; } = false;

    [Parameter]
    public bool Disabled { get; set; } = false;

    Dictionary<T, string>? options;
    List<T> selectedValues = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            options = await GetOptionsAsync_Func.Invoke();
            selectedValues = GetFlagValues((long)Convert.ChangeType(Value, typeof(long)));
            this.StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task SetValuesAsync(IEnumerable<T> newValues)
    {
        SetError(false);
        selectedValues = newValues.ToList();
        var sum = selectedValues.Sum(x => Convert.ToInt64(x));
        Value = (T)Convert.ChangeType(sum, typeof(T));
        await ValueChanged.InvokeAsync(Value);
    }

    void SetError(bool newError)
    {
        if (Error != newError)
        {
            Error = newError;
            this.StateHasChanged();
        }
    }

    string SetSelectionText(IEnumerable<string> selection)
    {
        int count = selection.Count();
        return count switch
        {
            0 => "None",
            1 => selection.First().ToDisplayName(),
            _ => $"{count} selected"
        };
    }

    List<T> GetFlagValues(long flag)
    {
        List<T> result = new();
        for (int i = 0; i < sizeof(long) * 8; i++)
        {
            long value = 1L << i;
            if ((flag & value) == value)
            {
                result.Add((T)Convert.ChangeType(value, typeof(T)));
            }
        }
        return result;
    }
}