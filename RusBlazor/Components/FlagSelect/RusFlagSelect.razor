@using RusBlazor.Components.MultiSelect
@using RusBlazor.Wrappers

@typeparam T

<RusMultiSelect T="T" Value="selectedValues" ValueChanged="SelectedValuesChanged" OverrideValueText="OverrideValueText" GetOptionsAsync="GetOptionsAsync" Label="@Label" CompareValue="new(compareValues)"  />


@code {
    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public CompareWrapper<T> CompareValue { get; set; }

    [Parameter]
    public Func<List<T>, string?, int, int, CancellationToken, Task<(SortedDictionary<T, string>, int)>> GetOptionsAsync { get; set; }

    [Parameter]
    public string Label { get; set; }

    List<T> selectedValues = new();
    List<T>? compareValues;

    protected override void OnParametersSet()
    {
        selectedValues.GetFlagsByValue(Value);
        if(CompareValue != null)
        {
            compareValues = new();
            compareValues.GetFlagsByValue(CompareValue.Value);
        }
        base.OnParametersSet();
    }

    void SelectedValuesChanged(List<T> newValues)
    {
        selectedValues = newValues;
        Value = selectedValues.GetValueByFlags();
        ValueChanged.InvokeAsync(Value);
    }

    string OverrideValueText(List<T> selectedValues)
    {
        var value = selectedValues.GetValueByFlags();
        return value?.ToString() ?? "";
    }
}