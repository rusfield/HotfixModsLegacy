@using Extensions;
@typeparam T
@inject IJSRuntime JSRuntime

<div class="rus-select">
    <RusInput TValue="string" @bind-Value="displayValue" DisplayName="test" OnFocus="OnFocus" OnBlur="OnBlur" InputChanged="InputChanged" Disabled="loadingComponent" />
    <RusMenu @ref="rusMenu" T="T" IsOpen="menuOpen" IsOpenChanged="ShowMenuChanged">
        <MenuContent>
            @if (loadingSearch)
            {
                <RusMenuItem Hoverable="false">
                    <RusMenuItemContentLoading />
                </RusMenuItem>
            }
            else if (!filteredItems.Any())
            {
                <RusMenuItem Hoverable="false">
                    <RusMenuItemContentText Text="No results" />
                </RusMenuItem>
            }
            else
            {
                foreach (var item in filteredItems)
                {
                    <RusMenuItem OnItemClick="@(() => SelectItem(item.Key, item.Value))" Id="@($"{rusMenu!.GetId()}-{item.Key.ToString()}")">
                        <RusMenuItemContentKeyValue Key="@item.Key.ToString()" Value="@item.Value" />
                    </RusMenuItem>
                }
            }
        </MenuContent>
    </RusMenu>
</div>

@code {
    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public Func<string, int, int, CancellationToken, Task<Dictionary<T, string>>> GetOptionsAsync { get; set; }

    [Parameter]
    public bool AllowUndefinedValues { get; set; } = true;

    bool loadingComponent = true;
    bool loadingSearch = false;
    bool menuOpen = false;
    string displayValue = "Loading";
    string? lastVerifiedDisplayValue;
    private Timer? searchTimer;
    private CancellationTokenSource? cancellationTokenSource;
    Dictionary<T, string> filteredItems = new();
    RusMenu<T>? rusMenu;
    int defaultPageSize = 5;
    int currentPageIndex = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Init default option
        if (firstRender)
        {
            var currentValue = await GetOptionsAsync(Value.ToString(), 0, 1, CancellationToken.None);
            if (currentValue.ContainsKey(Value))
            {
                displayValue = currentValue[Value];
            }
            else
            {
                displayValue = $"Unknown ({Value})";
            }
            loadingComponent = false;
            lastVerifiedDisplayValue = displayValue;
            this.StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    void OnFocus()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource = new CancellationTokenSource();
        CancellationToken cancellationToken = cancellationTokenSource.Token;

        Task.Run(async () =>
        {
            await UpdateList("", cancellationToken);
        });
    }

    void OnBlur()
    {
        cancellationTokenSource?.Cancel();
    }

    void InputChanged(string input)
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource = new CancellationTokenSource();
        CancellationToken cancellationToken = cancellationTokenSource.Token;

        searchTimer?.Dispose();
        searchTimer = new Timer(async (state) =>
        {
            if (!cancellationToken.IsCancellationRequested)
            {
                await UpdateList(input, cancellationToken);
            }
        }, null, 150, Timeout.Infinite);
    }

    async Task UpdateList(string search, CancellationToken token)
    {
        loadingSearch = true;
        menuOpen = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            if (GetOptionsAsync != null)
                filteredItems = await GetOptionsAsync.Invoke(search, currentPageIndex, defaultPageSize, token);

            // Adjust search so that a potential custom value is retrieved
            if (string.IsNullOrWhiteSpace(search))
                search = lastVerifiedDisplayValue ?? "";

            // Search for custom values
            if (AllowUndefinedValues && search.TryParseAsT<T>(out var value) && !filteredItems.ContainsKey(value))
                filteredItems.Add(value, $"Undefined ({value})");
        }
        catch (OperationCanceledException e)
        {
            // Search cancelled
        }
        loadingSearch = false;
        await InvokeAsync(StateHasChanged);
        if (filteredItems.ContainsKey(Value))
        {
            await JSRuntime.InvokeVoidAsync("scrollToElementInContainer", rusMenu!.GetId(), $"{rusMenu!.GetId()}-{Value.ToString()}", 2000);
        }
    }

    void SelectItem(T key, string value)
    {
        Value = key;
        displayValue = value;
        lastVerifiedDisplayValue = value;
        menuOpen = false;
        _ = ValueChanged.InvokeAsync(Value);
    }

    void ShowMenuChanged(bool showMenu)
    {
        if (!showMenu)
            displayValue = lastVerifiedDisplayValue;
        menuOpen = showMenu;
    }
}

