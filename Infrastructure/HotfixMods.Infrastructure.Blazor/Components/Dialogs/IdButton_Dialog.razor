@using Microsoft.JSInterop;
@using HotfixMods.Infrastructure.Services

@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<MudBadge Icon="@Icons.Material.Filled.Close" Color="Color.Primary" Overlap="true" OnClick="(() => Dialog.Cancel())" Class="py-4">
    <MudDialog>
        <DialogContent>
            <MudStack>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CopyToClipboardAsync_Click">Copy Id</MudButton>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="RefreshAsync_Click" Disabled="@(!IsUpdate)">Refresh Id</MudButton>
            </MudStack>
        </DialogContent>
    </MudDialog>
</MudBadge>
@code {
    [CascadingParameter]
    MudDialogInstance Dialog { get; set; }

    [Parameter]
    public bool IsUpdate { get; set; } = true;

    [Parameter]
    public Func<Task<int>> GetNextIdAsync_Func { get; set; }

    async Task CopyToClipboardAsync_Click()
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", "TODO");
        Snackbar.Add($"TODO copied to clipboard", Severity.Info, config => { config.Icon = Icons.Material.Filled.Check; });
        Dialog.Close(-1);
    }

    async Task RefreshAsync_Click()
    {
        var newId = await GetNextIdAsync_Func();

        if(-1 == newId)
        {
            Snackbar.Add($"TODO - No ID", Severity.Info, config => { config.Icon = Icons.Material.Filled.Warning; });
        }
        else
        {
            Snackbar.Add($"ID set to {newId}", Severity.Info, config => { config.Icon = Icons.Material.Filled.Check; });
            Dialog.Close(newId);
        }
    }
}