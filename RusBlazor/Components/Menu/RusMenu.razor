@using RusBlazor.Components.Helpers
@using RusBlazor.Enums
@typeparam T

@inject IJSRuntime JSRuntime

<div class="@("rus-menu")" style="@($"{StateStyle()} {AnchorStyle()}")" id="@(parentContainerId)">

    @if (MenuTopContent != null)
    {
        <div class="rus-menu-top">
            @MenuTopContent
        </div>
    }


    @if (MenuContent != null)
    {
        <div class="rus-menu-dropdown" id="@id">
            @MenuContent
        </div>
    }


    @if (MenuBottomContent != null)
    {
        <div class="rus-menu-bottom">
            @MenuBottomContent
        </div>
    }

</div>

@if (isOpen)
{
    <RusBackgroundOverlay OnClick="CloseAsync" />
}


@code {
    [Parameter]
    public EventCallback<(bool, int)> IsOpenChanged { get; set; }

    [Parameter]
    public Anchor Anchor { get; set; } = Anchor.Auto;

    [Parameter]
    public RenderFragment? MenuContent { get; set; }

    [Parameter]
    public RenderFragment? MenuTopContent { get; set; }

    [Parameter]
    public RenderFragment? MenuBottomContent { get; set; }

    string id;
    string parentContainerId;
    int animationDurationMs = 200;
    int dropdownHeight = 240;
    bool isOpen = false;

    protected override void OnInitialized()
    {
        id = Guid.NewGuid().ToString();
        parentContainerId = Guid.NewGuid().ToString();
        base.OnInitialized();
    }

    string AnchorStyle()
    {
        return Anchor switch
        {
            Anchor.Bottom => "top: 100%; left: 0;",
            Anchor.Top => "bottom: 100%; left: 0;",
            Anchor.Left => "right: 100%; top: 0;",
            Anchor.Right => "left: 100%; top: 0;",
            Anchor.BottomLeft => "top: 100%; right: 0;",
            Anchor.BottomRight => "top: 100%; left: 0;",
            Anchor.TopLeft => "bottom: 100%; right: 0;",
            Anchor.TopRight => "bottom: 100%; left: 0;",
            _ => "top: 100%; left: 0;",
        };
    }

    string StateStyle()
    {
        return isOpen ? "display:block;" : "display:none;";
    }

    public async Task OpenAsync()
    {
        if (!isOpen)
        {
            await JSRuntime.InvokeVoidAsync("toggleDropdownHeight", id, true, dropdownHeight, animationDurationMs);
            await JSRuntime.InvokeVoidAsync("toggleDropdownOpacity", parentContainerId, true, animationDurationMs);

            await InvokeAsync(async () =>
            {
                await IsOpenChanged.InvokeAsync((true, animationDurationMs));
            });
            isOpen = true;
        }
    }

    public async Task CloseAsync()
    {
        if (isOpen)
        {
            await JSRuntime.InvokeVoidAsync("toggleDropdownHeight", id, false, dropdownHeight, animationDurationMs);
            await JSRuntime.InvokeVoidAsync("toggleDropdownOpacity", parentContainerId, false, animationDurationMs / 2);

            await InvokeAsync(async () =>
            {
                await IsOpenChanged.InvokeAsync((false, animationDurationMs));
            });
            await Task.Delay(animationDurationMs);
            isOpen = false;
        }
    }

    public string GetId()
    {
        return id;
    }
}