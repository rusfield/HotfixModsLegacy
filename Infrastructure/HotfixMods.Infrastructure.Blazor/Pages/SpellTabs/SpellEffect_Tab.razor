@using HotfixMods.Infrastructure.Blazor.Components.DtoContent
@using HotfixMods.Infrastructure.InfoModels
@using HotfixMods.Core.Enums.Db2

@inherits DtoContentBase<SpellDto, SpellEffect>

<PagedDtoContent T="SpellEffect">
    <PagedDtoContentPage>
        <MudItem xs="3">
            <Input_Element T="int" @bind-Value="Value.EffectIndex" ValueCompare="ValueCompare?.EffectIndex" Label="@nameof(Value.EffectIndex).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectIndex))" />
            <Input_Element T="short" @bind-Value="Value.EffectAura" ValueCompare="ValueCompare?.EffectAura" Label="@nameof(Value.EffectAura).ToDisplayName()" GetOptionsAsync_Func="GetEffectTypes" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectAura))" />
            <Input_Element T="uint" @bind-Value="Value.Effect" ValueCompare="ValueCompare?.Effect" Label="@nameof(Value.Effect).ToDisplayName()" GetOptionsAsync_Func="GetEffects" OnInfoAdornmentClick="@(OpenInfoDialog(info.Effect))" />
            <Input_Element T="decimal" @bind-Value="Value.EffectAmplitude" ValueCompare="ValueCompare?.EffectAmplitude" Label="@nameof(Value.EffectAmplitude).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectAmplitude))" />
            <Input_Element T="int" @bind-Value="Value.EffectAttributes" ValueCompare="ValueCompare?.EffectAttributes" Label="@nameof(Value.EffectAttributes).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectAttributes))" />
            <Input_Element T="int" @bind-Value="Value.DifficultyID" ValueCompare="ValueCompare?.DifficultyID" Label="@nameof(Value.DifficultyID).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.DifficultyID))" />
        </MudItem>
        <MudItem xs="6">
            <Placeholder_Element Amount="4" />
        </MudItem>
        <MudItem xs="3">
            <Input_Element T="int" @bind-Value="Value.EffectAuraPeriod" ValueCompare="ValueCompare?.EffectAuraPeriod" Label="@nameof(Value.EffectAuraPeriod).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectAuraPeriod))" />
            <Input_Element T="decimal" @bind-Value="Value.EffectBonusCoefficient" ValueCompare="ValueCompare?.EffectBonusCoefficient" Label="@nameof(Value.EffectBonusCoefficient).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectBonusCoefficient))" />
            <Input_Element T="decimal" @bind-Value="Value.EffectChainAmplitude" ValueCompare="ValueCompare?.EffectChainAmplitude" Label="@nameof(Value.EffectChainAmplitude).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectChainAmplitude))" />
            <Input_Element T="int" @bind-Value="Value.EffectChainTargets" ValueCompare="ValueCompare?.EffectChainTargets" Label="@nameof(Value.EffectChainTargets).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectChainTargets))" />
            <Input_Element T="int" @bind-Value="Value.EffectItemType" ValueCompare="ValueCompare?.EffectItemType" Label="@nameof(Value.EffectItemType).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectItemType))" />
            <Input_Element T="int" @bind-Value="Value.EffectMechanic" ValueCompare="ValueCompare?.EffectMechanic" Label="@nameof(Value.EffectMechanic).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectMechanic))" />
        </MudItem>
    </PagedDtoContentPage>
    <PagedDtoContentPage>
        <MudItem xs="3">
            <Input_Element T="decimal" @bind-Value="Value.EffectPointsPerResource" ValueCompare="ValueCompare?.EffectPointsPerResource" Label="@nameof(Value.EffectPointsPerResource).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectPointsPerResource))" />
            <Input_Element T="decimal" @bind-Value="Value.EffectPosFacing" ValueCompare="ValueCompare?.EffectPosFacing" Label="@nameof(Value.EffectPosFacing).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectPosFacing))" />
            <Input_Element T="decimal" @bind-Value="Value.EffectRealPointsPerLevel" ValueCompare="ValueCompare?.EffectRealPointsPerLevel" Label="@nameof(Value.EffectRealPointsPerLevel).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectRealPointsPerLevel))" />
            <Input_Element T="int" @bind-Value="Value.EffectTriggerSpell" ValueCompare="ValueCompare?.EffectTriggerSpell" Label="@nameof(Value.EffectTriggerSpell).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectTriggerSpell))" />
            <Input_Element T="decimal" @bind-Value="Value.BonusCoefficientFromAP" ValueCompare="ValueCompare?.BonusCoefficientFromAP" Label="@nameof(Value.BonusCoefficientFromAP).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.BonusCoefficientFromAP))" />
            <Input_Element T="decimal" @bind-Value="Value.PvpMultiplier" ValueCompare="ValueCompare?.PvpMultiplier" Label="@nameof(Value.PvpMultiplier).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.PvpMultiplier))" />
        </MudItem>
        <MudItem xs="6">
            <Placeholder_Element Amount="4" />
        </MudItem>
        <MudItem xs="3">
            <Input_Element T="decimal" @bind-Value="Value.Coefficient" ValueCompare="ValueCompare?.Coefficient" Label="@nameof(Value.Coefficient).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.Coefficient))" />
            <Input_Element T="decimal" @bind-Value="Value.Variance" ValueCompare="ValueCompare?.Variance" Label="@nameof(Value.Variance).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.Variance))" />
            <Input_Element T="decimal" @bind-Value="Value.ResourceCoefficient" ValueCompare="ValueCompare?.ResourceCoefficient" Label="@nameof(Value.ResourceCoefficient).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.ResourceCoefficient))" />
            <Input_Element T="decimal" @bind-Value="Value.GroupSizeBasePointsCoefficient" ValueCompare="ValueCompare?.GroupSizeBasePointsCoefficient" Label="@nameof(Value.GroupSizeBasePointsCoefficient).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.GroupSizeBasePointsCoefficient))" />
            <Input_Element T="decimal" @bind-Value="Value.EffectBasePointsF" ValueCompare="ValueCompare?.EffectBasePointsF" Label="@nameof(Value.EffectBasePointsF).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectBasePointsF))" />
            <Input_Element T="int" @bind-Value="Value.ScalingClass" ValueCompare="ValueCompare?.ScalingClass" Label="@nameof(Value.ScalingClass).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.ScalingClass))" />
        </MudItem>
    </PagedDtoContentPage>
    <PagedDtoContentPage>
        <MudItem xs="3">
            <Input_Element T="int" @bind-Value="Value.EffectMiscValue0" ValueCompare="ValueCompare?.EffectMiscValue0" Label="@nameof(Value.EffectMiscValue0).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectMiscValue0))" />
            <Input_Element T="int" @bind-Value="Value.EffectMiscValue1" ValueCompare="ValueCompare?.EffectMiscValue1" Label="@nameof(Value.EffectMiscValue1).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectMiscValue1))" />
            <Input_Element T="uint" @bind-Value="Value.EffectRadiusIndex0" ValueCompare="ValueCompare?.EffectRadiusIndex0" Label="@nameof(Value.EffectRadiusIndex0).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectRadiusIndex0))" />
            <Input_Element T="uint" @bind-Value="Value.EffectRadiusIndex1" ValueCompare="ValueCompare?.EffectRadiusIndex1" Label="@nameof(Value.EffectRadiusIndex1).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectRadiusIndex1))" />
        </MudItem>
        <MudItem xs="6">
            <Placeholder_Element Amount="4" />
            <InlineGroup Merged="false">
                <LeftContent>
                    <Input_Element T="short" @bind-Value="Value.ImplicitTarget0" ValueCompare="ValueCompare?.ImplicitTarget0" Label="@nameof(Value.ImplicitTarget0).ToDisplayName()" GetOptionsAsync_Func="GetImplicitTargets" OnInfoAdornmentClick="@(OpenInfoDialog(info.ImplicitTarget0))" />
                </LeftContent>
                <RightContent>
                    <Input_Element T="short" @bind-Value="Value.ImplicitTarget1" ValueCompare="ValueCompare?.ImplicitTarget1" Label="@nameof(Value.ImplicitTarget1).ToDisplayName()" GetOptionsAsync_Func="GetImplicitTargets" OnInfoAdornmentClick="@(OpenInfoDialog(info.ImplicitTarget1))" />
                </RightContent>
            </InlineGroup>
        </MudItem>
        <MudItem xs="3">
            <Input_Element T="int" @bind-Value="Value.EffectSpellClassMask0" ValueCompare="ValueCompare?.EffectSpellClassMask0" Label="@nameof(Value.EffectSpellClassMask0).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectSpellClassMask0))" />
            <Input_Element T="int" @bind-Value="Value.EffectSpellClassMask1" ValueCompare="ValueCompare?.EffectSpellClassMask1" Label="@nameof(Value.EffectSpellClassMask1).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectSpellClassMask1))" />
            <Input_Element T="int" @bind-Value="Value.EffectSpellClassMask2" ValueCompare="ValueCompare?.EffectSpellClassMask2" Label="@nameof(Value.EffectSpellClassMask2).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectSpellClassMask2))" />
            <Input_Element T="int" @bind-Value="Value.EffectSpellClassMask3" ValueCompare="ValueCompare?.EffectSpellClassMask3" Label="@nameof(Value.EffectSpellClassMask3).ToDisplayName()" OnInfoAdornmentClick="@(OpenInfoDialog(info.EffectSpellClassMask3))" />
        </MudItem>
    </PagedDtoContentPage>
</PagedDtoContent>

@code {

    SpellEffectInfo info = new();

    async Task<Dictionary<short, string>> GetEffectTypes()
    {
        return Enum.GetValues<SpellEffectEffectAura>().ToDictionary(key => (short)key, value => value.ToDisplayString());
    }

    async Task<Dictionary<uint, string>> GetEffects()
    {
        return Enum.GetValues<SpellEffectEffect>().ToDictionary(key => (uint)key, value => value.ToDisplayString());
    }

    async Task<Dictionary<short, string>> GetImplicitTargets()
    {
        return Enum.GetValues<SpellEffectImplicitTarget>().ToDictionary(key => (short)key, value => value.ToDisplayString());
    }
}