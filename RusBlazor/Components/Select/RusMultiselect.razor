@typeparam T


<div class="rus-select">
    <RusInput TValue="string" @bind-Value="displayValue" DisplayName="test" OnFocus="OnFocus" OnBlur="OnBlur" InputChanged="InputChanged" />
    <RusMenu T="T" IsOpen="menuOpen" IsOpenChanged="ShowMenuChanged">
        @if (loading)
        {
            <RusMenuItem Hoverable="false">
                <RusMenuItemContentLoading />
            </RusMenuItem>
        }
        else if (!filteredItems.Any())
        {
            <RusMenuItem Hoverable="false">
                <RusMenuItemContentNoResults />
            </RusMenuItem>
        }
        else
        {
            foreach (var item in filteredItems)
            {
                <RusMenuItem OnItemClick="@(() => SelectItem(item.Key))">
                    <RusMenuItemContentKeyValue Key="@item.Key.ToString()" Value="@item.Value.Item1" Multiselect="true" Checked="@(selectedValues.Contains(item.Key))" />
                </RusMenuItem>
            }
        }
    </RusMenu>
</div>

@code {
    [Parameter]
    public T Value { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public Func<string, CancellationToken, Task<Dictionary<T, (string, bool)>>> GetOptionsAsync { get; set; }

    bool loading = false;
    bool menuOpen = false;
    string? displayValue;
    string? lastVerifiedDisplayValue;
    private Timer? searchTimer;
    private CancellationTokenSource? cancellationTokenSource;
    Dictionary<T, (string, bool)> filteredItems = new();
    List<T> selectedValues = new();

    void OnFocus()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource = new CancellationTokenSource();
        CancellationToken cancellationToken = cancellationTokenSource.Token;

        Task.Run(async () =>
        {
            await UpdateList("", cancellationToken);
        });
    }

    void OnBlur()
    {
        cancellationTokenSource?.Cancel();
    }

    void InputChanged(string input)
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource = new CancellationTokenSource();
        CancellationToken cancellationToken = cancellationTokenSource.Token;

        searchTimer?.Dispose();
        searchTimer = new Timer(async (state) =>
        {
            if (!cancellationToken.IsCancellationRequested)
            {
                await UpdateList(input, cancellationToken);
            }
        }, null, 300, Timeout.Infinite);
    }

    async Task UpdateList(string search, CancellationToken token)
    {
        loading = true;
        menuOpen = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            if (GetOptionsAsync != null)
                filteredItems = await GetOptionsAsync.Invoke(search, token);
        }
        catch (OperationCanceledException e)
        {
            // Search cancelled
        }
        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    void SelectItem(T key)
    {
        if (selectedValues.Contains(key))
            selectedValues.Remove(key);
        else
            selectedValues.Add(key);

        _ = ValueChanged.InvokeAsync(Value);
    }

    void ShowMenuChanged(bool showMenu)
    {
        if (!showMenu)
            displayValue = lastVerifiedDisplayValue;
        menuOpen = showMenu;
    }
}