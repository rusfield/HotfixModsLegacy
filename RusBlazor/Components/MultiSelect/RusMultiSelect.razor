@using RusBlazor.Enums
@using RusBlazor.Components.Helpers
@using RusBlazor.Wrappers

@typeparam T
@inject IJSRuntime JSRuntime

<div class="rus-multiselect">
    <RusInput TValue="string" @ref="rusInput" @bind-Value="displayValue" @bind-CompareButtonHovered="compareButtonHover" DisplayName="test" OnFocus="OnFocusAsync" OnBlur="OnBlur" InputChanged="InputChanged" ValueText="@(GetDbValue())" Loading="loadingComponent" Active="inputActive" Label="@Label" BorderRadius="BorderRadius" />
    <RusMenu @ref="rusMenu" IsOpenChanged="ShowMenuChanged">
        <MenuTopContent>
            <RusMenuItem Hoverable="false">
                <div class="@("rus-multiselect-button-group")">
                    <RusButton Style="width: 25%;" OnClick="ShowSelectedAsync" DefaultPadding="false" HoverTooltipText="@_showSelectedTooltip">
                        <RusIcon IconName="checklist" />
                    </RusButton>
                    <RusButton Style="width: 25%;" OnClick="ResetFilterAsync" DefaultPadding="false" HoverTooltipText="@_resetFilterTooltip">
                        <RusIcon IconName="filter_alt_off" />
                    </RusButton>
                    <RusButton Style="width: 25%;" OnClick="SelectVisibleAsync" DefaultPadding="false" HoverTooltipText="@_selectVisibleTooltip">
                        <RusIcon IconName="playlist_add_check" />
                    </RusButton>
                    <RusButton Style="width: 25%;" OnClick="DeselectVisibleAsync" DefaultPadding="false" HoverTooltipText="@_deselectVisibleTooltip">
                        <RusIcon IconName="playlist_remove" />
                    </RusButton>
                </div>
            </RusMenuItem>
        </MenuTopContent>
        <MenuContent>
            @if (loadingSearch)
            {
                <RusMenuItem Hoverable="false" Style="height: 80%;">
                    <RusMenuItemContentLoading />
                </RusMenuItem>
            }
            else if (!filteredItems.Any())
            {
                <RusMenuItem Hoverable="false" Style="height: 80%;">
                    <RusMenuItemContentNoResults />
                </RusMenuItem>
            }
            else
            {
                int itterator = 1;
                foreach (var item in filteredItems)
                {
                    bool selected = Value.Contains(item.Key);
                    <RusMenuItem OnItemClick="@(async () => await SelectItemAsync(item.Key))" Class="@(selected ? "selected" : "")" Separator="@(itterator++ < filteredItems.Count)">
                        <RusMenuItemContentKeyValue Key="@item.Key.ToString()" Value="@(item.Value)" Multiselect="true" Checked="@(selected)" />
                    </RusMenuItem>
                }
            }
        </MenuContent>
        <MenuBottomContent>
            <RusMenuItem Hoverable="false">
                <div class="rus-multiselect-pagination-group">
                    <RusButton Style="width: 25%;" OnClick="PreviousPage" Disabled="IsFirstPageIndex()" DefaultPadding="false">
                        <RusIcon IconName="navigate_before" />
                    </RusButton>
                    <div class="rus-multiselect-pagination-text">
                        @(new MarkupString(GetPaginationText()))
                    </div>
                    <RusButton Style="width: 25%;" OnClick="NextPage" Disabled="IsLastPageIndex()" DefaultPadding="false">
                        <RusIcon IconName="navigate_next" />
                    </RusButton>
                </div>
            </RusMenuItem>
        </MenuBottomContent>
    </RusMenu>
    @if (DisplayCompareValueButton())
    {
        <RusCompareButton OnClick="CompareButtonClick" OnHover="OnCompareButtonHover" Active="inputActive" TooltipText="@TooltipText()" />
    }
</div>

@code {
    [CascadingParameter(Name = "DisplayDbValue")]
    public bool DisplayDbValue { get; set; } = false;

    [Parameter]
    public List<T> Value { get; set; }

    [Parameter]
    public EventCallback<List<T>> ValueChanged { get; set; }

    [Parameter]
    public CompareWrapper<List<T>> CompareValue { get; set; }

    [Parameter]
    public Func<List<T>, string?, int, int, CancellationToken, Task<(SortedDictionary<T, string>, int)>> GetOptionsAsync { get; set; }

    [Parameter] // Set to override how value is displayed. Default is "xxx yyy zzz".
    public Func<List<T>, string> OverrideValueText { get; set; }

    [Parameter]
    public string Label { get; set; }

    [Parameter]
    public BorderRadius BorderRadius { get; set; } = Enums.BorderRadius.ALL;

    bool loadingComponent = true;
    bool loadingSearch = false;
    bool compareButtonHover = false;
    string displayValue = "";
    string lastVerifiedDisplayValue = "";
    string lastInput = "";
    bool inputActive;
    int pageSize = 10;
    int currentPageIndex = 0;
    int resultCount = -1;
    CancellationTokenSource? searchTokenSource;
    SortedDictionary<T, string> filteredItems = new();
    RusMenu? rusMenu;
    RusInput<string>? rusInput;
    string? rusInputId;
    bool previouslyDisplayDbValue = false;

    string _showSelectedTooltip = "Show selected values";
    string _resetFilterTooltip = "Reset filter";
    string _selectVisibleTooltip = "Select all (in current page)";
    string _deselectVisibleTooltip = "Deselect all (in current page)";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            rusInputId = rusInput?.GetId() ?? "";
            await SetDisplayTextAsync();

            loadingComponent = false;
            this.StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (GetOptionsAsync == null)
            throw new ParameterRequiredException(nameof(GetOptionsAsync));

        if (DisplayDbValue != previouslyDisplayDbValue)
        {
            previouslyDisplayDbValue = DisplayDbValue;
            if (!DisplayDbValue)
                displayValue = "Loading";

            await SetDisplayTextAsync();
        }
        await base.OnParametersSetAsync();
    }

    async Task OnFocusAsync()
    {
        // Element may be re-focused from clicking in menu too.
        if (!rusMenu?.IsOpen ?? false)
        {
            await JSRuntime.InvokeVoidAsync("selectElement", rusInputId);
            InitSearch(0);
        }
    }

    void NextPage()
    {
        currentPageIndex++;
        InitSearch(0);
    }

    void PreviousPage()
    {
        currentPageIndex--;
        InitSearch(0);
    }

    void OnBlur()
    {
        if (!rusMenu?.IsOpen ?? true)
            searchTokenSource?.Cancel();
    }

    void InputChanged(string input)
    {
        lastInput = input;
        InitSearch(150);
    }

    async Task ShowMenuChanged((bool, int) data)
    {
        bool showMenu = data.Item1;
        int animationDelay = data.Item2;
        inputActive = showMenu;
        if (!showMenu)
        {
            displayValue = lastVerifiedDisplayValue;
            lastInput = "";
            resultCount = -1;
            currentPageIndex = 0;
            this.StateHasChanged();
            await Task.Delay(animationDelay);
        }
    }

    async void InitSearch(int searchDelayMs)
    {
        searchTokenSource?.Cancel();
        searchTokenSource = new CancellationTokenSource();
        CancellationToken cancellationToken = searchTokenSource.Token;

        try
        {
            if (searchDelayMs > 0)
                await Task.Delay(searchDelayMs, cancellationToken);

            if (!cancellationToken.IsCancellationRequested)
            {
                await SearchAsync(cancellationToken);
            }
        }
        catch (OperationCanceledException)
        {
            // Search cancelled cancelled
        }
    }

    async Task SearchAsync(CancellationToken token)
    {
        loadingSearch = true;
        resultCount = -1;
        await rusMenu.OpenAsync();
        string search = lastInput;
        await InvokeAsync(StateHasChanged); // triggers "Loading" in menu
        try
        {
            if (GetOptionsAsync != null)
                (filteredItems, resultCount) = await GetOptionsAsync.Invoke(Value, search, currentPageIndex, pageSize, token);

            // TODO: Remove after undefined values can come from backend
            if (currentPageIndex == 0 && search.TryParseAsT<T>(out var value) && !filteredItems.ContainsKey(value))
                filteredItems.Add(value, $"Undefined ({value})");
        }
        catch (OperationCanceledException e)
        {
            // Search cancelled
        }
        loadingSearch = false;
        await InvokeAsync(StateHasChanged);
    }

    async Task SelectItemAsync(T key)
    {
        // Toggle whether key is added or removed
        if (Value.Contains(key))
        {
            Value.Remove(key);
        }
        else
        {
            Value.Add(key);
        }

        await SetDisplayTextAsync();

        await ValueChanged.InvokeAsync(Value);
        await JSRuntime.InvokeVoidAsync("selectElement", rusInputId);
    }

    async Task SetDisplayTextAsync()
    {
        if (DisplayDbValue)
        {
            displayValue = GetDbValue();
        }
        else if (Value.Count == 0)
        {
            displayValue = "None";
        }
        else if (Value.Count == 1)
        {
            if (filteredItems.ContainsKey(Value.First()))
            {
                displayValue = filteredItems[Value.First()];
            }
            else
            {
                (var currentValue, var unusedCount) = await GetOptionsAsync(Value, null, 0, 1, CancellationToken.None);
                if (currentValue.ContainsKey(Value.First()))
                {
                    displayValue = currentValue[Value.First()];
                }
                else
                {
                    // Fallback, but backend should return a value
                    displayValue = $"Unknown ({Value.First()})";
                }
            }
        }
        else
        {
            displayValue = $"{Value.Count} selected";
        }
        lastVerifiedDisplayValue = displayValue;
    }

    async Task ResetFilterAsync()
    {
        lastInput = "";
        InitSearch(0);
        await JSRuntime.InvokeVoidAsync("selectElement", rusInputId);
    }

    async Task SelectVisibleAsync()
    {
        foreach (var item in filteredItems)
        {
            if (!Value.Contains(item.Key))
                Value.Add(item.Key);
        }

        await SetDisplayTextAsync();
        await ValueChanged.InvokeAsync(Value);
        await JSRuntime.InvokeVoidAsync("selectElement", rusInputId);
    }

    async Task DeselectVisibleAsync()
    {
        foreach (var item in filteredItems)
        {
            if (Value.Contains(item.Key))
                Value.Remove(item.Key);
        }

        await SetDisplayTextAsync();
        await ValueChanged.InvokeAsync(Value);
        await JSRuntime.InvokeVoidAsync("selectElement", rusInputId);
    }

    async Task ShowSelectedAsync()
    {
        loadingSearch = true;
        resultCount = -1;
        currentPageIndex = 0;
        await JSRuntime.InvokeVoidAsync("selectElement", rusInputId);

        searchTokenSource?.Cancel();
        searchTokenSource = new CancellationTokenSource();
        CancellationToken cancellationToken = searchTokenSource.Token;

        (filteredItems, resultCount) = await GetOptionsAsync(Value, null, currentPageIndex, pageSize, cancellationToken);
        loadingSearch = false;
        await InvokeAsync(StateHasChanged);
    }

    string GetPaginationText()
    {
        if (resultCount == -1)
            return "&nbsp;<br />&nbsp;";
        else if (resultCount == 0)
            return "No<br />results";

        int from = currentPageIndex * pageSize + 1;
        int to = (currentPageIndex + 1) * pageSize;

        to = to > resultCount ? resultCount : to;

        return $"{from} to {to}<br />of {resultCount}";
    }

    bool IsLastPageIndex()
    {
        return ((currentPageIndex + 1) * pageSize) >= resultCount;
    }

    bool IsFirstPageIndex()
    {
        return currentPageIndex <= 0;
    }

    string GetDbValue()
    {
        if (OverrideValueText != null)
        {
            return OverrideValueText(Value);
        }
        return string.Join(" ", Value);
    }

    string GetDbCompareValue()
    {
        if (OverrideValueText != null)
        {
            return OverrideValueText(CompareValue.Value);
        }
        return string.Join(", ", CompareValue.Value);
    }

    bool DisplayCompareValueButton()
    {
        // If CompareValue is not set, do not show
        if(CompareValue?.Value != null)
        {
            // If CompareValue and Value have different counts, show
            if(CompareValue.Value.Count == Value.Count)
            {
                // If any differences between Value and CompareValue, show
                foreach(var value in Value)
                {
                    if (!CompareValue.Value.Contains(value))
                        return true;
                }
                return false;
            }
            return true;
        }
        return false;
    }

    async void CompareButtonClick()
    {
        compareButtonHover = false;
        if (CompareValue != null)
        {
            loadingComponent = true;
            Value = CompareValue.Value;
            await SetDisplayTextAsync();
            loadingComponent = false;
            await ValueChanged.InvokeAsync(Value);
        }
    }

    void OnCompareButtonHover(bool isHovering)
    {
        compareButtonHover = isHovering;
    }

    string TooltipText()
    {
        return $"Change value <strong>{GetDbValue()}</strong> to <strong>{GetDbCompareValue()}</strong>";
    }
}