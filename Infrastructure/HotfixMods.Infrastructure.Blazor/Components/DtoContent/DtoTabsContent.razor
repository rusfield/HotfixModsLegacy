@typeparam T where T : IDto
@using System.Reflection
@using HotfixMods.Infrastructure.Blazor.Components.Dialogs;
@using HotfixMods.Infrastructure.Blazor.Pages.Shared;
@using System.Diagnostics;
@using HotfixMods.Infrastructure.Helpers;

@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudGrid Class="mb-1 px-3">
    <MudItem xs="3">
        <MudStack Row="true" Justify="Justify.FlexStart">
            <MudButton Variant="@(PageTab.DtoCompare != null ? Variant.Filled : Variant.Outlined)" Color="Color.Info" OnClick="ValueCompare_Callback">Compare</MudButton>
            @if (PageTab.Dto.IsUpdate)
            {
                <MudStack Row="true" AlignItems="AlignItems.End" Justify="Justify.FlexStart">
                    <MudIconButton Icon="@Icons.Material.Filled.Key" Size="Size.Small" />
                    <MudText Typo="Typo.subtitle2" Align="Align.Center">
                        @PageTab.Dto.HotfixModsEntity.RecordID
                    </MudText>
                </MudStack>
            }
            else
            {
                <MudStack Row="true" AlignItems="AlignItems.End" Justify="Justify.FlexStart">
                    <MudIconButton Icon="@Icons.Material.Filled.KeyOff" Disabled Size="Size.Small" />
                    <MudText Typo="Typo.subtitle2" Align="Align.Center" Style="color:var(--mud-palette-action-disabled)">
                        No ID yet
                    </MudText>
                </MudStack>
            }
        </MudStack>
    </MudItem>
    <MudItem xs="6">
        <MudTextField T="string" Value="hotfixModsEntityName" ValueChanged="NameChanged" Variant="Variant.Text" Style="font-size:2.5rem;position:absolute;top:-41px;width:100%;" Class="center-input" Placeholder="@(typeof(T).Name.Replace("Dto", "").ToDisplayName() + "...")" />
    </MudItem>
    <MudItem xs="3">
        <MudStack Row="true" Justify="Justify.FlexEnd">
            <MudButton Disabled="@(!PageTab.Dto.IsUpdate || saving)" Variant="Variant.Filled" Color="Color.Success" OnClick="@(async () => await SaveAsync_Click(true))">
                @if (updating)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
                else
                {
                    @("Update")
                }
            </MudButton>
            <MudButton Disabled="updating" Variant="Variant.Filled" Color="Color.Success" OnClick="(async () => await SaveAsync_Click(false))">
                @if (saving)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
                else
                {
                    @("Save new")
                }
            </MudButton>
        </MudStack>
    </MudItem>
</MudGrid>
<MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary" Class="tab-bar" ActivePanelIndexChanged="PanelTabChanged">
    @foreach (var tab in tabs)
    {
        <MudTabPanel Class="custom-mud-tabs">
            <TabContent>
                <TabTitle_Element Title="@tab.TabPanelName" Color="@(tab.ValueIsNull ? Color.Dark : Color.Inherit)" />
            </TabContent>
        </MudTabPanel>
    }
</MudTabs>
<MudPaper Style="height:640px;background-color:var(--mud-palette-surface)" Class="mx-3 rounded-0">
    <MudCarousel @ref="mudCarouselRef" Style="position:fixed;width:100vw; height:640px;left:0" TData="object" ShowArrows="false" ShowBullets="false" AutoCycle="false" SelectedIndexChanged="PanelContentChanged">
        @foreach (var tab in tabs)
        {
            <MudCarouselItem Transition="Transition.Custom" CustomTransitionEnter="transition-tab" CustomTransitionExit="transition-fade">
                <div style="width:1232px; margin: 0 auto;">
                    <CascadingValue Name="ValueIsNull" Value="tab.ValueIsNull">
                        @if (null == tab.Instance)
                        {
                            <DynamicComponent Type="tab.ComponentType" />
                        }
                        else
                        {
                            <CascadingValue Name="InstanceData" Value="tab.Instance">
                                <InstancedDtoContent>
                                    <DynamicComponent Type="tab.ComponentType" />
                                </InstancedDtoContent>
                            </CascadingValue>
                        }
                    </CascadingValue>
                </div>
            </MudCarouselItem>
        }
    </MudCarousel>
</MudPaper>
<MudPaper Class="mud-theme-primary d-flex flex-column align-center" Elevation="4" Style="height:48px;">
    <MudStack Justify="Justify.SpaceBetween" Row="true" Style="width:100%" Class="px-1">
        <MudStack Row="true" Spacing="0">
            <MudIconButton Icon="@Icons.Material.Filled.Info" OnClick="@(() => OpenInfoDialog(GetTabDescription()))" />
            @if (currentInstanceData != null || GetTabRequired())
            {
                <MudIconButton Icon="@Icons.Material.Filled.CropFree" Class="invisible" /> @* Placeholder *@
            }
            else if (currentTab.ValueIsNull)
            {
                <MudIconButton Icon="@Icons.Material.Filled.AddCircle" OnClick="@(() => InitValue(currentTab.DtoPropertyType))" />
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.RemoveCircle" OnClick="@(() => DeleteValue(currentTab.DtoPropertyType))" />
            }
            <MudIconButton Icon="@Icons.Material.Filled.CropFree" Class="invisible" /> @* Placeholder *@
            <MudIconButton Icon="@Icons.Material.Filled.CropFree" Class="invisible" /> @* Placeholder *@
            <MudIconButton Icon="@Icons.Material.Filled.CropFree" Class="invisible" /> @* Placeholder *@
        </MudStack>
        <MudPagination @ref="mudPaginationRef" @bind-Selected="currentPage" Size="Size.Medium" Count="currentInstanceData?.InstanceCount ?? 0" Color="Color.Info" Class="@(currentInstanceData == null || currentInstanceData.InstanceCount <= 0 ? "invisible" : "")" @bind-Selected:after="NavigateInstance" />
        <MudStack Row="true" Spacing="0" Class="@(currentInstanceData == null ? "invisible" : "")">
            <MudIconButton Icon="@Icons.Material.Filled.MoveDown" Style="color:var(--mud-palette-text-primary);transform: rotate(90deg)" Disabled="currentInstanceData == null || currentInstanceData.CurrentInstance <= 1" OnClick="MoveInstanceBackward_Click" />
            <MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline" OnClick="RemoveInstance_Click" Disabled="currentInstanceData == null ||  currentInstanceData.InstanceCount <= 0" />
            <MudIconButton Icon="@Icons.Material.Filled.ControlPointDuplicate" OnClick="CloneInstance_Click" Disabled="currentInstanceData == null ||  currentInstanceData.InstanceCount <= 0" />
            <MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" OnClick="AddInstance_Click" />
            <MudIconButton Icon="@Icons.Material.Filled.MoveUp" Style="color:var(--mud-palette-text-primary);transform: rotate(90deg)" Disabled="currentInstanceData == null || currentInstanceData.CurrentInstance >= currentInstanceData.InstanceCount" OnClick="MoveInstanceForward_Click" />
        </MudStack>
    </MudStack>
</MudPaper>

@code {
    [CascadingParameter(Name = "PageTab")]
    public PageTab PageTab { get; set; }

    [CascadingParameter(Name = "RefreshIndex")]
    public Action RefreshIndex { get; set; }

    [Parameter]
    public Func<T, Action<string, string, int>, Task<bool>> SaveAsync_Func { get; set; }

    [Parameter]
    public EventCallback ValueCompare_Callback { get; set; }

    [Parameter]
    public List<Type> RequiredTypes { get; set;  } = new(); // Which DB2/MySql objects can not be deleted.

    List<Content> tabs = new();
    MudCarousel<object>? mudCarouselRef;
    MudPagination? mudPaginationRef;
    Dictionary<Type, InstanceData> instanceData = new();
    InstanceData? currentInstanceData;
    DescriptionHelper descriptionHelper = new();
    int currentPage = 1;
    bool saving = false;
    bool updating = false;
    Content? currentTab = null;
    string hotfixModsEntityName = "";

    protected override void OnInitialized()
    {
        var properties = typeof(T).GetProperties();

        InitTabsList(properties);
        currentTab = tabs.FirstOrDefault();
        hotfixModsEntityName = PageTab.Dto.HotfixModsEntity.Name ?? "";
        PageTab.TabName = hotfixModsEntityName;
        base.OnInitialized();
    }

    // Recusrive method to extract properties from DTO and DTO group lists
    void InitTabsList(PropertyInfo[] properties, Type? groupType = null)
    {
        foreach (var (property, index) in properties.WithIndex())
        {
            if (property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(List<>) && property.Name.EndsWith("groups", StringComparison.OrdinalIgnoreCase))
            {
                groupType = property.PropertyType.GetGenericArguments()[0];

                if (!instanceData.ContainsKey(groupType))
                {
                    var count = PageTab.Dto.GetDtoGroup(groupType).Count;
                    instanceData[groupType] = new(groupType, 1, count);
                }

                var groupProperties = groupType.GetProperties();
                InitTabsList(groupProperties, groupType);
            }
            else
            {
                var tabName = property.Name;
                var tabType = TryGetTabType(tabName);
                if (null == tabType)
                    continue;
                tabs.Add(new Content(tabName, tabType, property.PropertyType, groupType, PageTab.Dto, GetInstanceData(groupType)));
            }
        }
    }

    Type? TryGetTabType(string propertyName)
    {
        string pagesNamespace = "HotfixMods.Infrastructure.Blazor.Pages";
        pagesNamespace += $".{typeof(T).Name.Replace("Dto", "")}Tabs";
        var type = Type.GetType($"{pagesNamespace}.{propertyName}_Tab");

        return type;
    }

    void PanelTabChanged(int newIndex)
    {
        mudCarouselRef?.MoveTo(newIndex);
        currentTab = tabs[newIndex];
        currentInstanceData = GetInstanceData(currentTab.GroupType);
    }

    void PanelContentChanged(int newIndex)
    {
        if (newIndex >= 0 && newIndex < tabs.Count)
        {
            currentPage = currentInstanceData?.CurrentInstance ?? 1;

            var dtoValue = PageTab.Dto.GetDtoValue(currentTab.DtoPropertyType);
            if (dtoValue == null && currentTab.DtoPropertyType.IsGenericType)
            {
                dtoValue = PageTab.Dto.GetDtoListValue(currentTab.DtoPropertyType.GetGenericArguments()[0]);
            }
            currentTab.ValueIsNull = dtoValue == null && (currentInstanceData == null || currentInstanceData.InstanceCount <= 0);
        }
        else
        {
            currentInstanceData = null;
            currentPage = 1;
        }
    }

    void NavigateInstance()
    {
        if (currentInstanceData != null)
        {
            currentInstanceData.CurrentInstance = currentPage;
        }
    }

    void AddInstance_Click()
    {
        if (currentInstanceData != null)
        {
            PageTab.Dto.AddToGroup(currentInstanceData.GroupType, currentInstanceData.CurrentInstance - 1);
            currentInstanceData.InstanceCount++;
            currentInstanceData.CurrentInstance++;
            currentPage = currentInstanceData.CurrentInstance;
            foreach (var tab in tabs.Where(t => t.GroupType == currentTab?.GroupType))
            {
                tab.ValueIsNull = currentInstanceData.InstanceCount <= 0;
            }
        }
    }

    void CloneInstance_Click()
    {
        if (currentInstanceData != null)
        {
            PageTab.Dto.CloneInGroup(currentInstanceData.GroupType, currentInstanceData.CurrentInstance - 1);
            currentInstanceData.InstanceCount++;
            currentInstanceData.CurrentInstance++;
            currentPage = currentInstanceData.CurrentInstance;
        }
    }

    void RemoveInstance_Click()
    {
        if (currentInstanceData != null)
        {
            PageTab.Dto.RemoveFromGroup(currentInstanceData.GroupType, currentInstanceData.CurrentInstance - 1);
            currentInstanceData.InstanceCount--;
            if (currentInstanceData.InstanceCount == 0)
            {
                currentInstanceData.CurrentInstance = 1;
            }
            else if (currentInstanceData.CurrentInstance == 1)
            {
                // Do nothing
            }
            else
            {
                currentInstanceData.CurrentInstance--;
            }
            currentPage = currentInstanceData.CurrentInstance;
            foreach (var tab in tabs.Where(t => t.GroupType == currentTab?.GroupType))
            {
                tab.ValueIsNull = currentInstanceData.InstanceCount <= 0;
            }
        }
    }

    void MoveInstanceForward_Click()
    {
        int currentIndex = currentInstanceData.CurrentInstance - 1;
        int newIndex = currentInstanceData.CurrentInstance;
        PageTab.Dto.MoveInGroup(currentInstanceData.GroupType, currentIndex, newIndex);
        currentInstanceData.CurrentInstance++;
        currentPage = currentInstanceData.CurrentInstance;
    }

    void MoveInstanceBackward_Click()
    {
        int currentIndex = currentInstanceData.CurrentInstance - 1;
        int newIndex = currentInstanceData.CurrentInstance - 2;
        PageTab.Dto.MoveInGroup(currentInstanceData.GroupType, currentIndex, newIndex);
        currentInstanceData.CurrentInstance--;
        currentPage = currentInstanceData.CurrentInstance;
    }

    InstanceData? GetInstanceData(Type? groupType)
    {
        if (groupType != null && instanceData.ContainsKey(groupType))
            return instanceData[groupType];
        return null;
    }

    async Task SaveAsync_Click(bool isUpdate)
    {
        PageTab.Dto.IsUpdate = isUpdate;
        var stopwatch = new Stopwatch();
        stopwatch.Start();
        if (isUpdate)
            updating = true;
        else
            saving = true;

        List<string> logs = new();
        var result = await SaveAsync_Func((T)PageTab.Dto, (string title, string subtitle, int progress) =>
            {
                logs.Add(subtitle);
            });

        stopwatch.Stop();
        var remainingTime = 500 - stopwatch.ElapsedMilliseconds;

        // Wait for a minimum of 500ms (UI trick)
        if (remainingTime > 0)
        {
            await Task.Delay((int)remainingTime);
        }

        saving = false;
        updating = false;
        if (result)
        {
            Snackbar.Add($"Saved successfully.", Severity.Info, config => { config.Icon = Icons.Material.Filled.Check; });
        }
        else
        {
            Snackbar.Add($"Saving failed.", Severity.Error, config => { config.Icon = Icons.Material.Filled.Error; });
        }
    }

    class Content
    {
        public Content(string tabPanelName, Type componentType, Type dtoPropertyType, Type? groupType, IDto dto, InstanceData? instance)
        {
            TabPanelName = tabPanelName;
            ComponentType = componentType;
            DtoPropertyType = dtoPropertyType;
            GroupType = groupType;

            Instance = instance;

            ValueIsNull = dto.GetDtoValue(dtoPropertyType) == null && (Instance == null || Instance.InstanceCount <= 0);
            if (ValueIsNull && DtoPropertyType.IsGenericType)
            {
                ValueIsNull = dto.GetDtoListValue(dtoPropertyType.GetGenericArguments()[0]) == null;
            }
        }
        public string TabPanelName { get; set; }
        public Type ComponentType { get; set; }
        public Type DtoPropertyType { get; set; }
        public Type? GroupType { get; set; }

        public bool ValueIsNull { get; set; }
        public InstanceData? Instance { get; set; }
    }

    void RefreshPage()
    {
        this.StateHasChanged();
    }

    void OpenInfoDialog(string? infoText)
    {
        if (!string.IsNullOrWhiteSpace(infoText))
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(Message_Dialog.Text), infoText);
            DialogService.Show<Message_Dialog>(null, parameters);
        }
    }

    void InitValue(Type? dtoValueType)
    {
        if (dtoValueType != null && currentTab != null)
        {
            PageTab.Dto.SetDtoValueToDefault(dtoValueType);
            currentTab.ValueIsNull = false;
        }

    }

    void DeleteValue(Type? dtoValueType)
    {
        if (dtoValueType != null && currentTab != null)
        {
            PageTab.Dto.SetDtoValueToNull(dtoValueType);
            currentTab.ValueIsNull = true;
        }
    }

    void NameChanged(string newName)
    {
        hotfixModsEntityName = newName ?? "";
        PageTab.TabName = newName ?? "";
        PageTab.Dto.HotfixModsEntity.Name = newName;
        RefreshIndex();
    }

    string? GetTabDescription()
    {
        var type = currentTab?.DtoPropertyType;
        if (type != null && type.IsGenericType && type.GetGenericTypeDefinition() == typeof(List<>))
        {
            type = type.GetGenericArguments()[0];
        }

        return descriptionHelper.TryGetDescription(type);
    }

    bool GetTabRequired()
    {
        return currentTab?.DtoPropertyType == null ? false : RequiredTypes.Any(t => t == currentTab.DtoPropertyType);
    }
}
