@page "/"
@using HotfixMods.Infrastructure.Blazor.PageData
@using HotfixMods.Infrastructure.Blazor.Components.Dialogs
@using HotfixMods.Infrastructure.Blazor.Handlers;
@using HotfixMods.Infrastructure.Blazor.Pages.Dashboards
@using HotfixMods.Infrastructure.Blazor.Pages.News

@inject IDialogService DialogService

<MudTabs @ref="_mudTabsRef" Elevation="2" Centered="true" Color="Color.Dark" KeepPanelsAlive="true" Style="z-index:101">
    <Header>
        <MudTooltip Text="New">
            <MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" Style="color:var(--mud-palette-text-primary)" OnClick="NewTab_Click" />
        </MudTooltip>
    </Header>
    <ChildContent>
        <CascadingValue Name="RefreshIndex" Value="RefreshIndex">
            @foreach (var (tab, index) in tabs.WithIndex())
            {
                <CascadingValue Name="PageTab" Value="tab">
                    <MudTabPanel ID="@tab.TabID">
                        <ChildContent>
                            <MudContainer MaxWidth="MaxWidth.Large" Class="my-10 pt-10">
                                <DynamicComponent Type="tab.PageType" />
                            </MudContainer>
                        </ChildContent>
                        <TabContent>
                            <MudStack Row="true" Justify="Justify.SpaceBetween" Style="width:100%;">
                                <MudIcon Icon="@GetPageIcon(tab.PageType)" />
                                <MudText Typo="Typo.subtitle2">@FormatTabName(tab.TabName)</MudText>
                                <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Dark" onclick="@(() => CloseTab_Click(tab.TabID))" />
                            </MudStack>
                        </TabContent>
                    </MudTabPanel>
                </CascadingValue>
            }
            @if(tabs.Count == 0)
            {
                <News />
            }
        </CascadingValue>
    </ChildContent>
</MudTabs>

<MudDrawer @bind-Open="@_menuOpen" Anchor="Anchor.Bottom" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6" Align="Align.Center" Style="width:100%">Hotfix Mods</MudText>
    </MudDrawerHeader>
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2" Style="width:100%;">
        <div onmouseover="@(() => SetHover("TODO"))">
            <MudIconButton Icon="@Icons.Material.Filled.MonitorHeart" Color="Color.Inherit" Size="Size.Small" />
        </div>
        <div onmouseover="@(() => SetHover("Settings"))">
            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" Size="Size.Small" />
        </div>
        <MudText Color="Color.Inherit" Typo="Typo.h5">|</MudText>

        @* Creatures *@
        <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" onmouseover="@(() => SetHover("Creatures"))">
            <ActivatorContent>
                <MudIconButton Icon="@GetPageIcon(typeof(Creatures))" Color="Color.Inherit" Size="Size.Large" Style="pointer-events: none;" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem OnClick="@(() => OpenDashboard_Click(new PageTab("Creatures", typeof(CreatureDashboard))))">My Creatures</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenDialog_Click<CreatureSearchId_Dialog>(new PageTab("", typeof(Creatures))))">Search by Creature ID</MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenDialog_Click<CreatureSearchCreatureDisplayInfoId_Dialog>(new PageTab("", typeof(Creatures))))">Search by Creature Display Info ID</MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenDialog_Click<CreatureSearchCharacterName_Dialog>(new PageTab("", typeof(Creatures))))">Search by Character Name</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => NewDto_Click<CreatureDto>(new PageTab("New Creature", typeof(Creatures))))">New Creature</MudMenuItem>
            </ChildContent>
        </MudMenu>

        @* Gameobjects *@
        <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" onmouseover="@(() => SetHover("Game Objects"))">
            <ActivatorContent>
                <MudIconButton Icon="@GetPageIcon(typeof(Gameobjects))" Color="Color.Inherit" Size="Size.Large" Style="pointer-events: none;" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem OnClick="@(() => OpenDashboard_Click(new PageTab("Game Objects", typeof(GameobjectDashboard))))">My Game Objects</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenDialog_Click<GameobjectSearchId_Dialog>(new PageTab("", typeof(Gameobjects))))">Search by ID</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => NewDto_Click<GameobjectDto>(new PageTab("New Game Object", typeof(Gameobjects))))">New Game Object</MudMenuItem>
            </ChildContent>
        </MudMenu>

        @* Items *@
        <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" onmouseover="@(() => SetHover("Items"))">
            <ActivatorContent>
                <MudIconButton Icon="@GetPageIcon(typeof(Items))" Color="Color.Inherit" Size="Size.Large" Style="pointer-events: none;" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem OnClick="@(() => OpenDashboard_Click(new PageTab("Items", typeof(ItemDashboard))))">My Items</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenDialog_Click<ItemSearchId_Dialog>(new PageTab("", typeof(Items))))">Search by ID</MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenDialog_Click<ItemSearchItemDisplayInfoId_Dialog>(new PageTab("", typeof(Items))))">Search by Item Display Info ID</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => NewDto_Click<ItemDto>(new PageTab("New Item", typeof(Items))))">New Item</MudMenuItem>
            </ChildContent>
        </MudMenu>

        @* Spells *@
        <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" onmouseover="@(() => SetHover("Spells"))">
            <ActivatorContent>
                <MudIconButton Icon="@GetPageIcon(typeof(Spells))" Color="Color.Inherit" Size="Size.Large" Style="pointer-events: none;" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem OnClick="@(() => OpenDashboard_Click(new PageTab("Spells", typeof(SpellDashboard))))">My Spells</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenDialog_Click<SpellSearchId_Dialog>(new PageTab("", typeof(Spells))))">Search by ID</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => NewDto_Click<SpellDto>(new PageTab("New Spell", typeof(Spells))))">New Spell</MudMenuItem>
            </ChildContent>
        </MudMenu>

        @* Spell Visual Kits *@
        <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" onmouseover="@(() => SetHover("Spell Visual Kits"))">
            <ActivatorContent>
                <MudIconButton Icon="@GetPageIcon(typeof(SpellVisualKits))" Color="Color.Inherit" Size="Size.Large" Style="pointer-events: none;" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem OnClick="@(() => OpenDashboard_Click(new PageTab("Spell Visual Kits", typeof(SpellVisualKitDashboard))))">My Spell Visual Kits</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenDialog_Click<SpellVisualKitSearchId_Dialog>(new PageTab("", typeof(SpellVisualKits))))">Search by ID</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => NewDto_Click<SpellVisualKitDto>(new PageTab("New Spell Visual Kit", typeof(SpellVisualKits))))">New Spell Visual Kit</MudMenuItem>
            </ChildContent>
        </MudMenu>

        @* Anim Kits *@
        <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" onmouseover="@(() => SetHover("Anim Kits"))">
            <ActivatorContent>
                <MudIconButton Icon="@GetPageIcon(typeof(AnimKits))" Color="Color.Inherit" Size="Size.Large" Style="pointer-events: none;" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem OnClick="@(() => OpenDashboard_Click(new PageTab("Anim Kits", typeof(AnimKitDashboard))))">My Anim Kits</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenDialog_Click<AnimKitSearchId_Dialog>(new PageTab("", typeof(AnimKits))))">Search by ID</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => NewDto_Click<AnimKitDto>(new PageTab("New Anim Kit", typeof(AnimKits))))">New Anim Kit</MudMenuItem>
            </ChildContent>
        </MudMenu>

        @* Sound Kits *@
        <MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" onmouseover="@(() => SetHover("Sound Kits"))">
            <ActivatorContent>
                <MudIconButton Icon="@GetPageIcon(typeof(SoundKits))" Color="Color.Inherit" Size="Size.Large" Style="pointer-events: none;" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem OnClick="@(() => OpenDashboard_Click(new PageTab("Sound Kits", typeof(SoundKitDashboard))))">My Sound Kits</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => OpenDialog_Click<SoundKitSearchId_Dialog>(new PageTab("", typeof(SoundKits))))">Search by ID</MudMenuItem>
                <MudMenuItem Disabled="true"><MudPaper Style="height:1px; width:100%;background-color:var(--mud-palette-action-disabled)" /></MudMenuItem>
                <MudMenuItem OnClick="@(() => NewDto_Click<SoundKitDto>(new PageTab("New Sound Kit", typeof(SoundKits))))">New Sound Kit</MudMenuItem>
            </ChildContent>
        </MudMenu>

        <MudText Color="Color.Inherit" Typo="Typo.h5">|</MudText>
        <MudText Color="Color.Inherit" Typo="Typo.subtitle2" Style="min-width:120px">@hover</MudText>

    </MudStack>
</MudDrawer>

@* Area to toggle menu *@
<div style="position: fixed;bottom:0;width:100%;height:30px;" @onmouseover="MouseOverBottom" />

@code {
    MudTabs? _mudTabsRef;
    bool _menuOpen = false;
    List<PageTab> tabs = new();
    bool tabAdded = false;
    string hover = "";

    protected override void OnInitialized()
    {
        TabHandler.LaunchTab = LaunchTab;
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (tabAdded)
        {
            tabAdded = false;
            _mudTabsRef?.ActivatePanel(tabs.Count - 1);
        }
        if (!_menuOpen)
            hover = "";
        base.OnAfterRender(firstRender);
    }

    void NewTab_Click()
    {
        _menuOpen = true;
    }

    void NewDto_Click<TDto>(PageTab tab)
        where TDto : IDto
    {
        tab.Dto = (TDto)Activator.CreateInstance(typeof(TDto))!;
        tab.Dto.HotfixModsEntity.Name = tab.TabName;
        LaunchTab(tab);
    }

    void OpenDashboard_Click(PageTab tab)
    {
        LaunchTab(tab);
    }

    void CloseTab_Click(Guid tabId)
    {
        tabs.RemoveAll(t => t.TabID == tabId);
    }

    void LaunchTab(PageTab tab)
    {
        _menuOpen = false;
        tabs.Add(tab);
        tabAdded = true;
    }

    void SetHover(string menuItem)
    {
        hover = menuItem;
    }

    void RefreshIndex()
    {
        this.StateHasChanged();
    }

    string GetPageIcon(Type pageType)
    {
        if (pageType == typeof(Creatures))
            return Icons.Material.Filled.FaceRetouchingNatural;
        else if (pageType == typeof(Gameobjects))
            return Icons.Material.Filled.OutlinedFlag;
        else if (pageType == typeof(Items))
            return Icons.Material.Outlined.Shield;
        else if (pageType == typeof(Spells))
            return Icons.Material.Filled.AutoFixHigh;
        else if (pageType == typeof(SpellVisualKits))
            return Icons.Material.Filled.AutoAwesome;
        else if (pageType == typeof(AnimKits))
            return Icons.Material.Filled.Group;
        else if (pageType == typeof(SoundKits))
            return Icons.Material.Filled.VolumeUp;
        else
            return Icons.Material.Filled.FormatListBulleted; // Dashboards and fallback
    }

    string FormatTabName(string tabName)
    {
        tabName = tabName.ToUpper();
        if (tabName.Length > 10)
            tabName = tabName.Substring(0, 8) + "...";
        return tabName;
    }

    async void OpenDialog_Click<TDialog>(PageTab pageTab)
    where TDialog : ComponentBase
    {
        var result = await DialogService.Show<TDialog>().Result;
        if (!result.Canceled && result.Data != null)
        {
            pageTab.Dto = (DtoBase)result.Data;
            pageTab.TabName = ((DtoBase)result.Data).GetDisplayName();
            LaunchTab(pageTab);
            this.StateHasChanged();
        }
    }

    void MouseOverBottom()
    {
        _menuOpen = true;
    }
}