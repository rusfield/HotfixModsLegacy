@using RusBlazor.Components.Select
@using MockData

@inherits TestContext

@code {
    SortedDictionary<int, string> _testData;
    TaskCompletionSource<(SortedDictionary<int, string>, int)> _tcs;
    Func<int, string, int, int, CancellationToken, Task<(SortedDictionary<int, string>, int)>> _getOptionsAsync;
    int _selectedValue;

    public RusSelectTests()
    {
        SetupVariables(0);
    }

    void SetupVariables(int selectedValue)
    {
        _testData = MockDataHelper.BuildDummyData(0, 5, false);
        _tcs = new TaskCompletionSource<(SortedDictionary<int, string>, int)>();
        _getOptionsAsync = (selectedValue, search, pageIndex, pageSize, ct) => _tcs.Task;
        _selectedValue = selectedValue;
    }

    [Fact]
    public void RendersCorrectly()
    {
        SetupVariables(1);
        string label = "Test label";

        var cut = Render(
            @<RusSelect T="int" @bind-Value="_selectedValue" GetOptionsAsync="_getOptionsAsync" Label="@(label)" />
        );

        cut.MarkupMatches(
    @<div class="rus-select">
        <div class="rus-input-label">@label</div>
        <div class="rus-input-container" style="">
            <input id:ignore class="rus-input" disabled value:ignore>
        </div>
    </div>
    );
    }

    [Fact]
    public void RenderLoadFirstValueState()
    {
        SetupVariables(1);
        var cut = Render(
        @<RusSelect T="int" @bind-Value="_selectedValue" GetOptionsAsync="_getOptionsAsync" />
    );

        cut.FindComponent<RusSelect<int>>().Render();
        cut.Find(".rus-input").MarkupMatches(
        @<input id:ignore class:ignore disabled value="Loading">
        );
    }

    [Fact]
    public void RenderValidFirstValueState()
    {
        SetupVariables(1);
        var cut = Render(
        @<RusSelect T="int" @bind-Value="_selectedValue" GetOptionsAsync="_getOptionsAsync" />
        );
        _tcs.SetResult((_testData, _testData.Count));
        cut.FindComponent<RusSelect<int>>().Render();
        cut.Find(".rus-input").MarkupMatches(
        @<input id:ignore class:ignore value="@(_testData[_selectedValue])">
        );
    }

    [Fact]
    public void RenderInvalidFirstValueState()
    {
        SetupVariables(-1);
        var cut = Render(
        @<RusSelect T="int" @bind-Value="_selectedValue" GetOptionsAsync="_getOptionsAsync" />
    );
        _tcs.SetResult((_testData, _testData.Count));
        cut.FindComponent<RusSelect<int>>().Render();
        cut.Find(".rus-input").MarkupMatches(
        @<input id:ignore class:ignore value="@($"Unknown ({_selectedValue})")">
        );
    }
}
